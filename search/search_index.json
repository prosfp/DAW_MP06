{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Desenvolupament web en entorn client","text":"<p>Benvingut al curs de desenvolupament web Front-End. Aqu\u00ed tens un llistat de les subp\u00e0gines del curs:</p>"},{"location":"#uf1-sintaxi-i-objectes-predefinits-del-llenguatge","title":"UF1 - Sintaxi i objectes predefinits del llenguatge","text":"<ul> <li>Arquitectures i eines de programaci\u00f3</li> <li>Aplicaci\u00f3 i verificaci\u00f3 de la sintaxi del llenguatge</li> <li>Identificaci\u00f3 i aplicaci\u00f3 dels objectes predefinits del llenguatge</li> </ul>"},{"location":"#uf2-estructures-definides-pel-programador-i-objectes","title":"UF2 - Estructures definides pel programador i objectes","text":"<ul> <li>Funcions a JS</li> <li>Objectes a JS</li> <li>Arrays a JS</li> <li>M\u00f2duls a JS</li> </ul>"},{"location":"#uf3-","title":"UF3 -","text":""},{"location":"#uf4-esdeveniments-formularis-i-dom","title":"UF4 - Esdeveniments, formularis i DOM","text":""},{"location":"#tooling","title":"Tooling","text":"<ul> <li>VSCode</li> <li>Git &amp; Github</li> <li>Jest</li> </ul>"},{"location":"Tooling/github/","title":"Repositoris, Git i Github","text":""},{"location":"Tooling/github/#que-es-un-repositori","title":"Qu\u00e8 \u00e9s un Repositori?","text":"<p>En el m\u00f3n de la programaci\u00f3 i el desenvolupament de programari, un repositori \u00e9s un emmagatzematge o lloc on es guarda tot el codi font, els arxius i els recursos d'un projecte. Els repositoris serveixen per dur el seguiment de les versions del codi, col\u00b7laborar amb altres desenvolupadors i gestionar els canvis de manera eficient.</p>"},{"location":"Tooling/github/#git-el-sistema-de-control-de-versions","title":"Git: El Sistema de Control de Versions","text":"<p>Git \u00e9s un sistema de control de versions distribu\u00eft que permet als desenvolupadors gestionar el seguiment de canvis en els seus projectes de programaci\u00f3. Amb Git, pots:</p> <ul> <li>Registrar canvis en el codi i mantenir una hist\u00f2ria completa de modificacions.</li> <li>Col\u00b7laborar amb altres desenvolupadors de manera eficient.</li> <li>Crear branques per a desenvolupar noves funcionalitats o solucionar problemes sense afectar el codi principal.</li> <li>Realitzar seguiment dels canvis i resoldre conflictes de manera senzilla.</li> </ul>"},{"location":"Tooling/github/#diferencies-entre-git-i-github","title":"Difer\u00e8ncies entre Git i GitHub","text":""},{"location":"Tooling/github/#git","title":"Git","text":"<ul> <li> <p>Sistema de Control de Versions (SCV): Git \u00e9s un SCV de codi obert dissenyat per gestionar el seguiment de canvis en el codi font i la col\u00b7laboraci\u00f3 entre desenvolupadors.</p> </li> <li> <p>Local: Git es pot utilitzar localment en el teu ordinador sense necessitat de connexi\u00f3 a Internet. Aix\u00f2 et permet gestionar els canvis i historial del teu projecte de forma independent.</p> </li> <li> <p>Comandes de Terminal: Utilitza comandes de terminal per a tasques com <code>git init</code> (iniciar un repositori), <code>git commit</code> (guardar canvis), i <code>git push</code> (enviar canvis a un repositori remot).</p> </li> <li> <p>Branching i Merging: Permet crear branques (branches) per a desenvolupar funcionalitats de forma a\u00efllada i mesclar (merge) els canvis quan estiguin llestos.</p> </li> </ul>"},{"location":"Tooling/github/#github","title":"GitHub","text":"<ul> <li> <p>Plataforma en L\u00ednia: GitHub \u00e9s una plataforma web que utilitza Git com a sistema de control de versions. Proporciona una interf\u00edcie en l\u00ednia per gestionar els teus repositoris Git.</p> </li> <li> <p>Repositoris Remots: GitHub \u00e9s un lloc on pots emmagatzemar els teus repositoris Git de forma remota a la n\u00favol. Aix\u00f2 permet la col\u00b7laboraci\u00f3 en projectes amb altres desenvolupadors.</p> </li> <li> <p>Gesti\u00f3 de Tasques: GitHub inclou funcionalitats com les \"issues\" (problemes) i \"pull requests\" (sol\u00b7licituds de tirar) per gestionar tasques, seguiment de bugs i col\u00b7laboraci\u00f3.</p> </li> <li> <p>Desplegament i Integraci\u00f3 Continua: Ofereix eines com GitHub Actions per a la integraci\u00f3 cont\u00ednua i desplegament automatitzat (CI/CD) dels teus projectes.</p> </li> <li> <p>Col\u00b7laboraci\u00f3 Social: Pots seguir altres desenvolupadors, col\u00b7laborar en projectes de codi obert i rebre notificacions sobre canvis en repositoris que et segueixes.</p> </li> <li> <p>Visibilitat P\u00fablica i Privada: GitHub permet tenir repositoris p\u00fablics (visibles per a tothom) i privats (nom\u00e9s accessibles als col\u00b7laboradors autoritzats).</p> </li> </ul> <p>Amb aquesta descripci\u00f3, els usuaris podran entendre millor les difer\u00e8ncies entre Git i GitHub i com funcionen junts en el m\u00f3n del desenvolupament de programari.</p>"},{"location":"Tooling/github/#github-classroom","title":"Github Classroom","text":""},{"location":"Tooling/github/#actualitzar-repositori-personal-alumne-amb-canvis-dun-repositori-remot-profe","title":"Actualitzar repositori personal (alumne) amb canvis d'un repositori remot (profe)","text":"<p>Aquesta guia explica com els alumnes poden actualitzar els seus repositoris personals (Repo Alumne) amb les noves carpetes i exercicis afegits al repositori original del professor (Repo Profe). En cas per exemple que s'afegeixin exercicis, aquests apareixeran directament sobre el mateix repositori en el que est\u00e0s treballant.</p> <ol> <li> <p>Clonar el Repositori Personal (Repo Alumne):</p> <p>Si has acceptat \"l'assginment\" a trav\u00e9s de l'enlla\u00e7 del professor, aix\u00f2 \u00e9s fa autom\u00e0ticament. Haur\u00e0s clonat el repositori al teu compte de Github. Pots clonar-lo per treballar en local amb VSCode. Pots fer servir la propia IDE de VSCode o utilitzar aquesta comanda per fer-ho:</p> <pre><code>git clone &lt;URL_del_repo_alumne&gt;\n</code></pre> </li> <li> <p>Afegir el Repositori del Professor com a Remot:</p> <p>Afegir el repositori original del professor (Repo Profe) com a remot permet obtenir els canvis del repositori remot, en aquest cas per exemple del professor. Utilitza aquesta comanda per afegir el remot:</p> <pre><code>git remote add profe &lt;URL_del_repo_profe&gt;\n</code></pre> </li> <li> <p>Obtenir els Canvis del Repositori del Professor:</p> <p>Per obtenir els canvis del repositori del professor, els alumnes han de fer un \"fetch\" de la branca que desitgin (normalment, \"main\" on s'afegeixen nous exercicis). Utilitza aquesta comanda</p> <pre><code>git fetch profe main\n</code></pre> <p>Aqu\u00ed hem anomenat aquesta branca remota \"profe\" per\u00f2 tu pots decidir com dir-li.</p> </li> <li> <p>Revisar els Canvis Abans del Merge:</p> <p>Abans de fusionar els canvis del professor amb el seu repositori personal, \u00e9s recomanable revisar-los. Utilitza aquesta comanda per veure les difer\u00e8ncies entre les branques:</p> <pre><code>git diff main..profe/main\n</code></pre> <p>Aix\u00f2 mostra les difer\u00e8ncies entre les dues branques i permet als alumnes veure els canvis abans de prendre una decisi\u00f3.</p> </li> <li> <p>Fer el Merge Utilitzant <code>--allow-unrelated-histories</code>:</p> <p>Un cop hagis revisat els canvis i estiguis satisfet amb ells, pots fer el merge utilitzant l'opci\u00f3 <code>--allow-unrelated-histories</code>. Aquesta opci\u00f3 permet la fusi\u00f3 de dues hist\u00f2ries que es consideren \"sense relaci\u00f3\" i \u00e9s necess\u00e0ria quan afegim nous continguts al repositori del professor. Utilitza aquesta comanda:</p> <pre><code>git merge --allow-unrelated-histories profe/main\n</code></pre> <p>El motiu d'utilitzar aquesta opci\u00f3 \u00e9s que els canvis es consideren sense relaci\u00f3 ja que la branca del professor i la branca personal dels alumnes no han compartit canvis en el passat.</p> </li> <li> <p>Confirmar els Canvis Locals**:</p> <p>Despr\u00e9s de fer el merge, podr\u00e0s confirmar els canvis locals:</p> <pre><code>git commit -am \"Actualitzaci\u00f3 des de la branca del professor\"\n</code></pre> </li> <li> <p>Enviar els Canvis al Repositori Personal Remot:</p> <p>Finalment, pots enviar els canvis al repositori personal remot (Repo Alumne) per posar-lo al dia i mantenir-lo sincronitzat:</p> <pre><code>git push origin main\n</code></pre> </li> </ol> <p>Fes un cop d'ull a Syncing with Git per entendre les principals comandes de sincronitzaci\u00f3 a GIT</p>"},{"location":"Tooling/github/#recursos-per-aprendre","title":"Recursos per aprendre","text":""},{"location":"Tooling/github/#top","title":"TOP","text":"<ol> <li> <p>Codecademy: Codecademy ofereix un curs gratu\u00eft sobre Git que cobreix els conceptes b\u00e0sics i les millors pr\u00e0ctiques.</p> </li> <li> <p>Learn the Basics of Git in Under 10 Minutes: Un article r\u00e0pid i pr\u00e0ctic de FreeCodeCamp que introdueix els conceptes b\u00e0sics de Git en menys de 10 minuts. Llegir l'article</p> </li> <li> <p>Tutorials de Git a W3Schools: W3Schools ofereix una s\u00e8rie de tutorials sobre Git que cobreixen diversos aspectes i comandes. Explora els tutorials</p> </li> </ol>"},{"location":"Tooling/github/#altres","title":"Altres","text":"<ol> <li> <p>Documentaci\u00f3 oficial de Git: La documentaci\u00f3 oficial de Git proporciona informaci\u00f3 detallada sobre com utilitzar les diferents comandes i caracter\u00edstiques de Git.</p> </li> <li> <p>Llibre \"Pro Git\": Pro Git \u00e9s un llibre en l\u00ednia gratu\u00eft que ofereix una guia completa sobre Git. \u00c9s una lectura excel\u00b7lent per a principiants i usuaris avan\u00e7ats.</p> </li> <li> <p>GitKraken Git GUI: Si prefereixes una interf\u00edcie gr\u00e0fica per a Git, pots utilitzar GitKraken, una eina GUI que facilita la gesti\u00f3 de repositoris Git.</p> </li> <li> <p>GitHub Guides: La secci\u00f3 de GitHub Guides ofereix guies senzilles per a temes com a pull requests, branching i col\u00b7laboraci\u00f3 en GitHub.s</p> </li> </ol>"},{"location":"Tooling/jest/","title":"Jest","text":""},{"location":"Tooling/jest/#jest-testejant-el-meu-codi","title":"Jest - Testejant el meu codi.","text":"<p>Jest \u00e9s un marc de proves de JavaScript que funciona junt amb NodeJS que permet escriure tests amb un enfocament en simplicitat i facilitat d'\u00fas.</p> <p>Per utilitzar Jest en el teu projecte, pots seguir aquests passos:</p> <ol> <li>Instal\u00b7la Jest com a depend\u00e8ncia de desenvolupament executant <code>npm install --save-dev jest</code>.</li> <li>Crea un directori <code>__tests__</code> en el directori arrel del teu projecte.</li> <li>Escriu els teus tests en fitxers amb l'extensi\u00f3 <code>.test.js</code> i col\u00b7loca'ls en el directori <code>__tests__</code> (no \u00e9s necessari per\u00f2 si recomanable)</li> <li>Executa els teus tests utilitzant la comanda <code>npm test</code>.</li> </ol> <p>A continuaci\u00f3 et deixo una llista de videos amb la configuraci\u00f3 que hem fet a classe. Us guiar\u00e0 a trav\u00e9s de la instal\u00b7laci\u00f3 de NodeJS, Jest i la creaci\u00f3 d'un projecte de proves amb Jest.</p> <p>Node.js installation tutorial for Ubuntu 22.04</p> <p>Per obtenir m\u00e9s informaci\u00f3 sobre Jest, consulta la documentaci\u00f3 oficial.</p> <p>Per aprendre m\u00e9s sobre les funcions disponibles a Jest, consulta la documentaci\u00f3 de l'API de Jest.</p>"},{"location":"Tooling/vscode/","title":"Visual Studio Code per al Desenvolupament JavaScript","text":"<p>Visual Studio Code (VSCode) \u00e9s una eina desenvolupada per Microsoft que es pot utilitzar en m\u00faltiples plataformes, com ara Windows, macOS i Linux. Ofereix funcions potents d'edici\u00f3 de codi, integraci\u00f3 amb Git, compatibilitat amb molts llenguatges de programaci\u00f3 i una extensa llibreria d'extensions per millorar la teva productivitat.</p>"},{"location":"Tooling/vscode/#com-installar-visual-studio-code","title":"Com Instal\u00b7lar Visual Studio Code","text":"<ol> <li> <p>Descarrega VSCode: V\u00e9s al lloc web oficial de Visual Studio Code i descarrega la versi\u00f3 adequada per al teu sistema operatiu.</p> </li> <li> <p>Instal\u00b7la VSCode: Executa l'arxiu descarregat i segueix les instruccions del proc\u00e9s d'instal\u00b7laci\u00f3.</p> </li> <li> <p>Obre VSCode: Un cop instal\u00b7lat, obre Visual Studio Code des del teu men\u00fa d'aplicacions o fent clic a l'ic\u00f2na a l'escriptori.</p> </li> </ol> <p></p>"},{"location":"Tooling/vscode/#extensions-essencials-per-javascript","title":"Extensions Essencials per JavaScript","text":"<p>VSCode es pot personalitzar amb extensions que faciliten el teu flux de treball en JavaScript. Aqu\u00ed tens algunes extensions de gran utilitat que pots mirar d'integrar en la teva configuraci\u00f3:</p> <ul> <li> <p>ESLint: Per a la validaci\u00f3 del codi JavaScript i les pr\u00e0ctiques de programaci\u00f3.</p> </li> <li> <p>Prettier: Per al formateig autom\u00e0tic del codi, mantenint un estil consistent.   </p> <ul> <li>Com formatejar codi amb Prettier a VSCode</li> </ul> </li> <li> <p>GitLens: Per a una millor integraci\u00f3 amb el sistema de control de versions Git.</p> </li> <li> <p>JavaScript (ES6) code snippets: Per a generar r\u00e0pides plantilles de codi JavaScript.</p> </li> <li> <p>Live Server: Per a servir r\u00e0pidament els teus arxius HTML, CSS i JavaScript amb un servidor local de desenvolupament.</p> </li> <li> <p>Bracket Pair Colorizer: Per a una millor visualitzaci\u00f3 i organitzaci\u00f3 de les parelles de claus en JavaScript.</p> </li> </ul>"},{"location":"Tooling/vscode/#configuracio-personalitzada","title":"Configuraci\u00f3 Personalitzada","text":"<p>Pots personalitzar VSCode ajustant les opcions de configuraci\u00f3 a les teves prefer\u00e8ncies. Per aconseguir-ho, obre la paleta de comandes amb <code>Ctrl + Shift + P</code>, busca \"Preferences: Open Settings (JSON)\" i personalitza el fitxer <code>settings.json</code> amb les teves prefer\u00e8ncies.</p> <p>Aquesta configuraci\u00f3 pot incloure la definici\u00f3 d'espais en blanc, el format de codi, els colors i moltes altres opcions que es poden adaptar a la teva manera de treballar.</p>"},{"location":"UF1/UF1_recursos/","title":"Recursos, tutorials i materials generals de JavaScript","text":""},{"location":"UF1/UF1_recursos/#tutorials","title":"Tutorials","text":"<ul> <li>W3Schools JavaScript Tutorial</li> <li>MDN JavaScript Tutorial</li> </ul>"},{"location":"UF1/UF1_recursos/#referencies","title":"Refer\u00e8ncies","text":"<ul> <li>W3Schools JavaScript Reference</li> <li>MDN JavaScript Reference</li> </ul>"},{"location":"UF1/UF1_recursos/#exercicis-i-proves","title":"Exercicis i proves","text":"<ul> <li>CodeAcademy</li> <li>W3Schools JavaScript Exercises</li> <li>W3Schools JavaScript Quiz</li> </ul>"},{"location":"UF1/UF1_recursos/#problemes-per-resoldre-i-resolts","title":"Problemes per resoldre (i resolts)","text":"<ul> <li>CheckiO JavaScript Exercises</li> <li>W3resource JavaScript Exercises (with solutions)</li> <li>Exercism (with solutions)</li> </ul>"},{"location":"UF1/UF1_recursos/#dubtes-i-problemes","title":"Dubtes i problemes","text":"<ul> <li>StackOverflow</li> </ul>"},{"location":"UF1/UF1_recursos/#altres-tutorials-i-referencies","title":"Altres tutorials i refer\u00e8ncies","text":""},{"location":"UF1/UF1_recursos/#html","title":"HTML","text":"<ul> <li>W3Schools HTML5 Tutorial</li> <li>W3Schools HTML5 Tags by Category</li> <li>W3Schools HTML5 Attributes</li> </ul>"},{"location":"UF1/UF1_recursos/#css","title":"CSS","text":"<ul> <li>W3Schools CSS Tutorial</li> <li>W3Schools CSS Reference</li> <li>W3Schools CSS Selectors</li> <li>W3Schools CSS Units</li> <li>W3Schools CSS Color Values</li> </ul> <p>Gran part d'aquests recursos han estat recuperats de la wiki de Sapalomera.</p>"},{"location":"UF1/UF1.1/UF1.1/","title":"Arquitectures i eines de programaci\u00f3","text":""},{"location":"UF1/UF1.1/UF1.1/#introduccio-a-larquitectura-web","title":"Introducci\u00f3 a l'Arquitectura Web","text":"<p>L'arquitectura web \u00e9s la base de tot el que experimentem mentre naveguem per internet. En aquesta introducci\u00f3, explorarem a fons aquesta arquitectura, des de les seves arrels hist\u00f2riques fins als navegadors web moderns.</p>"},{"location":"UF1/UF1.1/UF1.1/#historia-i-evolucio-dels-navegadors","title":"Hist\u00f2ria i Evoluci\u00f3 dels Navegadors","text":"<p>Els primers dies d'internet es caracteritzaven per la seva simplicitat. La web era principalment una col\u00b7lecci\u00f3 d'hipervincles i documents escrits en HTML que es mostraven de manera est\u00e0tica. Els primers navegadors com el Mosaic i el Netscape Navigator van ser pioners en la visualitzaci\u00f3 d'aquests documents.</p> <p>Comparativa navegadors Moderns</p> <p>Aqui pots consultar una gran quantitat de detalls sobre els principals navegadors en \u00fas que trobar\u00e0s</p> <p>La d\u00e8cada dels 90 va veure la famosa \"guerra dels navegadors\" entre Netscape i Internet Explorer. Aquesta compet\u00e8ncia va portar a moltes innovacions i canvis en la manera en qu\u00e8 es renderitzaven les p\u00e0gines web. A finals dels anys 90, Mozilla Firefox va sorgir com una alternativa de codi obert a Internet Explorer. Aquest navegador va portar la innovaci\u00f3 i la seguretat a l'experi\u00e8ncia de navegaci\u00f3.</p> <p>Avui en dia, els navegadors web com Chrome, Firefox, Safari i Edge s\u00f3n els l\u00edders del mercat. Tots aquests navegadors utilitzen motors d'interpretaci\u00f3 de JavaScript, com V8 (utilitzat per Chrome) o SpiderMonkey (utilitzat per Firefox), per processar i executar codi JavaScript a les p\u00e0gines web.</p>"},{"location":"UF1/UF1.1/UF1.1/#execucio-de-codi-en-un-navegador-web","title":"Execuci\u00f3 de codi en un navegador web","text":"<p>Els navegadors web segueixen una arquitectura b\u00e0sica com\u00fa a l'hora d'interactuar amb l'usuari i accedir als recursos web.</p> <p>Tot i aix\u00f2, cada navegador pot prioritzar algun aspecte concret, per exemple:</p> <ul> <li>Oferir la resposta m\u00e9s r\u00e0pida.</li> <li>Mostrar la resposta m\u00e9s fidel al contingut.</li> <li>Incrementar la seguretat de les comunicacions.</li> </ul> <p> Font: P\u00e0gina d'arquitectures E. Gallegos Trias</p> Arquitectura d'un Navegador Web <ul> <li> <p>Interf\u00edcie d'Usuari (UI): L'interf\u00edcie d'usuari \u00e9s la part visible del navegador amb la qual els usuaris interactuen. Inclou elements com la barra d'adreces, botons de navegaci\u00f3 i finestres emergents.</p> </li> <li> <p>Motor de Navegaci\u00f3: El motor de navegaci\u00f3 coordina les accions de l'usuari i la representaci\u00f3 de la p\u00e0gina web a la pantalla. Tamb\u00e9 gestiona diverses funcionalitats com la navegaci\u00f3 enrere i endavant, les pestanyes i les finestres emergents.</p> </li> <li> <p>Motor de Renderitzaci\u00f3: El motor de renderitzaci\u00f3 \u00e9s responsable de mostrar el contingut de les p\u00e0gines web a la pantalla. Aquest component interpreta el codi HTML, CSS i altres recursos per a renderitzar la p\u00e0gina web. \u00c9s important destacar que hi ha diversos motors de renderitzaci\u00f3, incloent Trident (Internet Explorer), Blink (Google Chrome), Gecko (Firefox) i WebKit (Safari).</p> </li> <li> <p>Interpretaci\u00f3 de JavaScript: Aquest component \u00e9s responsable d'executar codi JavaScript present a les p\u00e0gines web. Cada navegador utilitza el seu motor de JavaScript per a interpretar i executar els scripts. Alguns exemples de motors de JavaScript s\u00f3n V8 (Chrome), SpiderMonkey (Firefox) i JavaScriptCore (Safari).</p> </li> <li> <p>Gesti\u00f3 de Xarxa: El navegador realitza sol\u00b7licituds a servidors web per a obtenir recursos com p\u00e0gines HTML, imatges, arxius CSS i JavaScript. La gesti\u00f3 de xarxa implica la resoluci\u00f3 DNS, la creaci\u00f3 de connexions i la recuperaci\u00f3 de dades dels servidors.</p> </li> <li> <p>Mem\u00f2ria i Cach\u00e9: El navegador emmagatzema en mem\u00f2ria i en cach\u00e9 recursos per a millorar l'efici\u00e8ncia i la velocitat de c\u00e0rrega de les p\u00e0gines web. La gesti\u00f3 de mem\u00f2ria \u00e9s essencial per a evitar p\u00e8rdues de rendiment i bloquejos.</p> </li> </ul>"},{"location":"UF1/UF1.1/UF1.1/#motors-dinterpretacio-de-javascript","title":"Motors d'Interpretaci\u00f3 de JavaScript","text":"<p>Destaquem alguns dels principals motors (d'interpretaci\u00f3) de JavaScript, ja que s\u00f3n components essencials dels navegadors per l'execuci\u00f3 del JavaScript. Aquests motors s\u00f3n responsables de convertir el codi JavaScript en accions i resultats visibles a les p\u00e0gines web.</p> Nom del Motor Navegadors que ho Utilitzen Any d'Aparici\u00f3 Informaci\u00f3 Addicional V8 Google Chrome, Opera 2008 Desenvolupat per Google. SpiderMonkey Mozilla Firefox 1995 El motor original de JavaScript de Mozilla. JavaScriptCore (Nitro) Safari 2003 Desenvolupat per Apple. Chakra (abans) Internet Explorer 2008 Utilitzat en versions antigues d'Internet Explorer. Abandonat en favor de V8 per a Microsoft Edge. JavaScriptCore (JavaScriptCore) Microsoft Edge (abans) 2015 Abandonat en favor de V8 per a Microsoft Edge. JavaScriptCore (WebKit) Safari (abans) 2003 Abandonat en favor de JavaScriptCore (Nitro) per a Safari. <p>A continuaci\u00f3 tens alguns recursos excepcionals que ens ajudaran a entendre els proc\u00e9s t\u00e8cnic pel que ha de passar la l\u00f2gica del nostre codi web (JS en particular) fins a executar all\u00f2 pel que ha estat programat. No te'ls perdis!   </p> <p>JavaScript Engines - Filis Antillan</p> <p>Learn JavaScript Essentials - Lydia Hallie on DEV</p> <p></p>"},{"location":"UF1/UF1.2/UF1.2.1_IntroJS/","title":"JavaScript: Introducci\u00f3 a JS","text":""},{"location":"UF1/UF1.2/UF1.2.1_IntroJS/#javascript-que-es-i-quina-es-la-seva-relacio-amb-java","title":"JavaScript: Qu\u00e8 \u00e9s i quina \u00e9s la seva relaci\u00f3 amb Java?","text":"<p>JavaScript \u00e9s un llenguatge de programaci\u00f3 de scripts que s'usa principalment a les p\u00e0gines web. No t\u00e9 res a veure amb el llenguatge de programaci\u00f3 Java, tot i que els noms s\u00f3n similars.</p> <p></p> Aspecte JavaScript Java <code>\u00das principal</code> Desenvolupament web i aplicacions de client. \u00c0mpliament utilitzat en aplicacions d'empresa, desenvolupament d'aplicacions Android i servidors. <code>Execuci\u00f3</code> S'executa en el navegador del client. Requereix una m\u00e0quina virtual Java (JVM). <code>Tipus de programari</code> Interpretat. Compilat a bytecode i despr\u00e9s interpretat. <code>Portabilitat</code> Altament port\u00e0til entre diferents navegadors. Port\u00e0til a trav\u00e9s de plataformes amb JVM. <code>Sintaxi</code> Sintaxi m\u00e9s simple i flexible. Sintaxi m\u00e9s rigorosa i verbosa. <code>Paradigma de programaci\u00f3</code> Suporta la programaci\u00f3 orientada a objectes. Suporta m\u00faltiples paradigmes (OOP, procedimental, funcional). <code>Llibreries i frameworks</code> Abund\u00e0ncia de llibreries i frameworks per al desenvolupament web. Ampli ecosistema d'entorns i llibreries."},{"location":"UF1/UF1.2/UF1.2.1_IntroJS/#javascript-tecnologia-front-end-o-back-end","title":"JavaScript: Tecnologia Front-End o Back-End?","text":"<p>Front-End (Client-Side): En el front-end, JavaScript es fa servir per a la programaci\u00f3 dels navegadors web. Aquesta funcionalitat s'ocupa de les interaccions d'un lloc web o aplicaci\u00f3 web amb els usuaris en els seus navegadors. Amb JavaScript, pots crear din\u00e0micament elements HTML, gestionar esdeveniments com clics de ratol\u00ed i introduir animacions i efectes visuals. Tamb\u00e9 pots fer sol\u00b7licituds AJAX per carregar dades sense necessitat de recarregar la p\u00e0gina web completa.</p> <p>Back-End (Server-Side): En el back-end, JavaScript pot ser utilitzat amb tecnologies com Node.js per a la creaci\u00f3 de servidors i aplicacions web del costat del servidor. Amb Node.js, pots escriure codi JavaScript que s'executa al servidor en lloc de nom\u00e9s al navegador. Aix\u00f2 obre la porta a la creaci\u00f3 de tot tipus d'aplicacions web, com aplicacions de xat en temps real, servidors d'aplicacions web i serveis web.</p> <p>\u00das General: JavaScript \u00e9s un llenguatge de programaci\u00f3 vers\u00e0til i pot ser utilitzat per a moltes aplicacions diferents, no nom\u00e9s les relacionades amb la web. Pot ser utilitzat per al desenvolupament d'aplicacions m\u00f2bils amb el marc de treball React Native, la creaci\u00f3 d'aplicacions de l'escritori amb l'ajuda d'Electron i fins i tot per a la programaci\u00f3 d'Internet de les Coses (IoT).</p>"},{"location":"UF1/UF1.2/UF1.2.1_IntroJS/#ecmascript-lestandard-de-javascript","title":"ECMAScript: L'Est\u00e0ndard de JavaScript","text":"<p>ECMAScript (abreviat com a ES) es pot entendre com l'est\u00e0ndard o especificaci\u00f3 que defineix el llenguatge de programaci\u00f3 JavaScript. En altres paraules, JavaScript \u00e9s la implementaci\u00f3 concreta d'ECMAScript. L'ECMAScript estableix les regles i caracter\u00edstiques fonamentals que han de ser presents en qualsevol implementaci\u00f3 de JavaScript. Aquestes caracter\u00edstiques inclouen la sintaxi del llenguatge, els tipus de dades, les funcions...</p> <p>L'est\u00e0ndar ECMAScript 6 (o ECMAScript 2015), conegut tamb\u00e9 com a JavaScript 6, va ser una actualitzaci\u00f3 significativa de JavaScript que va introduir moltes caracter\u00edstiques noves i millores en el llenguatge. Algunes de les raons per les quals ECMAScript 6 va ser important inclouen:</p> <ul> <li> <p>Noves Caracter\u00edstiques clau</p> </li> <li> <p>Millora de la Llegibilitat</p> </li> <li> <p>Compatibilitat entre Navegadors</p> </li> <li> <p>Suport a les \u00daltimes Novetats:</p> </li> </ul>"},{"location":"UF1/UF1.2/UF1.2.1_IntroJS/#incrustar-javascript-en-un-document-html","title":"Incrustar JavaScript en un Document HTML","text":"<p>Podeu incrustar codi JavaScript en un document HTML de tres maneres diferents i compatibles entre s\u00ed:</p> JavaScript dins del document HTMLJavaScript en un fitxer externJavaScript dins d'elements HTML <pre><code>&lt;body&gt;\n   &lt;h1&gt;P\u00e0gina HTML&lt;/h1&gt;\n   &lt;script&gt;\n       alert(\"Aix\u00f2 \u00e9s codi JavaScript\");\n   &lt;/script&gt;\n&lt;/body&gt;\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;P\u00e0gina amb JavaScript&lt;/title&gt;\n    &lt;script src=\"arxiu.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Contingut principal&lt;/h1&gt;\n    &lt;!-- Altres elements HTML --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;P\u00e0gina amb JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Contingut principal&lt;/h1&gt;\n    &lt;button onclick=\"saluda()\"&gt;Fes clic aqu\u00ed&lt;/button&gt;\n    &lt;script&gt;\n        // Codi JavaScript incrustat\n        function saluda() {\n            alert(\"Hola, aix\u00f2 \u00e9s JavaScript!\");\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\u00c9s important tenir en compte que, per efici\u00e8ncia en la c\u00e0rrega de la p\u00e0gina, es recomana posar tot el codi JavaScript al final del document HTML, just abans de la marca <code>&lt;/body&gt;</code>. Aix\u00f2 assegura que la major part de la p\u00e0gina es carregui abans de l'execuci\u00f3 del JavaScript, millorant aix\u00ed la velocitat de c\u00e0rrega de la p\u00e0gina web.</p>"},{"location":"UF1/UF1.2/UF1.2.1_IntroJS/#referencies-i-recursos-addicionals","title":"Refer\u00e8ncies i recursos addicionals","text":"<ul> <li>MDN: Introducci\u00f3 a JavaScript a la documentaci\u00f3 de Mozilla</li> <li>Especificaci\u00f3 ECMAScript</li> <li>Top ES6 JS contributions</li> </ul>"},{"location":"UF1/UF1.2/UF1.2.2_Variables/","title":"Comentaris, tipus de dades, constants i variables","text":""},{"location":"UF1/UF1.2/UF1.2.2_Variables/#manipulacio-de-dades-en-javascript","title":"Manipulaci\u00f3 de Dades en JavaScript","text":"<p>En JavaScript, podem manipular dades de diverses maneres. En aquesta secci\u00f3, explorarem com imprimir dades, escriure comentaris i els set tipus fonamentals de dades en JavaScript.</p>"},{"location":"UF1/UF1.2/UF1.2.2_Variables/#imprimir-dades-a-la-consola","title":"Imprimir Dades a la Consola","text":"<p>Per imprimir dades a la consola en JavaScript, utilitzem la funci\u00f3 <code>console.log()</code>. Aquesta funci\u00f3 \u00e9s \u00fatil per depurar i mostrar missatges. Aqu\u00ed tens un exemple:</p> <pre><code>console.log('Aquest \u00e9s un missatge de prova.');\n</code></pre> <p>Aquest codi imprimir\u00e0 el missatge \"Aquest \u00e9s un missatge de prova.\" a la consola.</p>"},{"location":"UF1/UF1.2/UF1.2.2_Variables/#comentaris-en-javascript","title":"Comentaris en JavaScript","text":"<p>Els comentaris s\u00f3n \u00fatils per documentar el teu codi i fer-lo m\u00e9s llegible. JavaScript permet dos tipus de comentaris:</p> <ul> <li>Comentaris d'una sola l\u00ednia amb <code>//</code>:</li> </ul> <pre><code>// Aquest \u00e9s un comentari d'una sola l\u00ednia\n</code></pre> <ul> <li>Comentaris de m\u00faltiples l\u00ednies entre <code>/*</code> i <code>*/</code>:</li> </ul> <pre><code>/*\nAquest \u00e9s un comentari\nde m\u00faltiples l\u00ednies\n*/\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.2_Variables/#tipus-de-dades","title":"Tipus de Dades","text":""},{"location":"UF1/UF1.2/UF1.2.2_Variables/#estructures-i-tipus-de-dades","title":"Estructures i tipus de dades","text":"<p>L'\u00faltim est\u00e0ndard ECMAScript defineix 9 tipus:</p>"},{"location":"UF1/UF1.2/UF1.2.2_Variables/#primitives","title":"PRIMITIVES","text":"<p>6 tipus de dades primitives (els tipus de dades m\u00e9s b\u00e0sics i senzills en un llenguatge), controlades per l'operador <code>typeof</code>:</p> <ul> <li>Boolean: Poden ser <code>true</code> o <code>false</code></li> <li>Number: valors decimals i enters (sempre es guarden com a decimals)</li> </ul> <ul> <li> <p>Els n\u00fameros s'escriuen tal qual, separant els decimals amb un punt: <code>12</code> o <code>5.847</code>.</p> </li> <li> <p>Els n\u00fameros es poden expressar en format cient\u00edfic i hexadecimal: <code>-5.2e6</code> o <code>0x3F</code>.</p> </li> <li>Els n\u00fameros tenen un m\u00e0xim de 15 d\u00edgits significatius.</li> <li><code>NaN</code>: Not a Number, \u00e9s el resultat d'intentar convertir a n\u00famero alguna cosa que no ho \u00e9s.</li> <li><code>Infinity</code> i <code>-Infinity</code>: representen els valors positius i negatius de l'infinit, respectivament, i s'obtenen com a resultat de certes operacions matem\u00e0tiques.</li> </ul> <ul> <li>String: cadenes de car\u00e0cters. S'han d'escriure entre cometes simples o dobles. No existeix el tipus Character: un car\u00e0cter es guarda igualment com si fos un String</li> <li>BigInt: un tipus de dada que es va introduir amb l'est\u00e0ndard ECMAScript 11 (ES11) per a permetre la representaci\u00f3 i manipulaci\u00f3 de nombres sencers m\u00e9s grans que els que pot representar el tipus de dada Number est\u00e0ndard</li> <li>Symbol: s'utilitza per crear valors \u00fanics i immutables. Cada valor Symbol \u00e9s \u00fanic i no es pot canviar una vegada creat. Aix\u00f2 el fa \u00fatil en situacions on es volen evitar col\u00b7lisions d'identificadors o es volen utilitzar noms \u00fanics per a propietats d'objectes.</li> <li>Undefined i Null</li> </ul> <p>Undefined i Null</p> <p>Undefined: Al mostrar una variable que est\u00e0 declarada per\u00f2 no se li ha assignat cap valor, mostra undefined.La variable no existeix (no ocupa espai en mem\u00f2ria). Null: Si es vol definir una variable per\u00f2 no se li vol assignar cap valor, es pot posar a null. La variable existeix (ocupa espai) per\u00f2 no cont\u00e9 cap valor (est\u00e0 buida).</p>"},{"location":"UF1/UF1.2/UF1.2.2_Variables/#compostos","title":"COMPOSTOS","text":"<p>Object: s\u00f3n estructures de dades que poden contenir m\u00faltiples valors i funcions. Estan formats per un conjunt de parells clau-valor, on el clau \u00e9s una cadena de text (anomenada \"proprietat\") i el valor pot ser qualsevol tipus de dada, incl\u00f2s un altre objecte. Tamb\u00e9 s'utilitza per estructures de dades com: new Object, new Array, new Map, new Set, new WeakMap, new WeakSet, new Date i gaireb\u00e9 tot fet amb la paraula clau new.</p> <p>Function: s\u00f3n blocs reutilitzables de codi que poden acceptar arguments i realitzar tasques espec\u00edfiques. Les funcions poden ser assignades a variables, passades com a arguments a altres funcions i fins i tot retornades com valors de d'altres funcions. Les funcions tamb\u00e9 tenen propietats i m\u00e8todes especials, com ara length (que indica el nombre d'arguments esperats) i call (que permet cridar una funci\u00f3 amb un objecte espec\u00edfic com a context).</p>"},{"location":"UF1/UF1.2/UF1.2.2_Variables/#constants-i-variables","title":"Constants i Variables","text":"<p>Les variables en JavaScript s\u00f3n utilitzades per emmagatzemar dades i es poden identificar amb un nom que segueixi els seg\u00fcents criteris. Alguns exemples de la sintaxi a utilitzar per declarar variables:</p> <pre><code>- nomVariable\n- \\_variableSecundaria\n- $variableTerciaria\n</code></pre> <ul> <li> <p>Poden contenir lletres, d\u00edgits o el gui\u00f3 baix (_).</p> </li> <li> <p>No es poden utilitzar paraules reservades de JavaScript.</p> </li> </ul> <p>Warning</p> <p>JavaScript \u00e9s  Case Sensitive, el que significa que distingeix entre maj\u00fascules i min\u00fascules. Aix\u00f2 vol dir que les variables com \"nom\", \"Nom\" i \"NOM\" s\u00f3n considerades com variables diferents.</p>"},{"location":"UF1/UF1.2/UF1.2.2_Variables/#recomanacions-destil","title":"Recomanacions d'estil","text":"<ul> <li>Utilitza noms significatius.</li> <li>Utilitza camelCase per als noms de variables.</li> <li>Evita noms massa llargs o complexos.</li> <li>Utilitza noms en angl\u00e8s (pot ser interpretat per un major nombre de persones)</li> <li>Evita abreviacions confuses.</li> <li>Evita paraules reservades de JavaScript.</li> </ul>"},{"location":"UF1/UF1.2/UF1.2.2_Variables/#declaracio-i-inicialitzacio-var-let-i-const","title":"Declaraci\u00f3 i inicialitzaci\u00f3: <code>var</code>, <code>let</code> i <code>const</code>","text":"<p>En JavaScript, les variables s\u00f3n utilitzades per emmagatzemar dades. Hi ha diferents maneres de declarar variables, com <code>var</code>, <code>let</code>, i <code>const</code>, i cadascuna t\u00e9 les seves particularitats. En aquesta p\u00e0gina, explorarem com declarar variables i les difer\u00e8ncies clau entre <code>var</code>, <code>let</code>, i <code>const</code>.</p> <p>VAR Declaraci\u00f3 de Variables Tradicional</p> <ul> <li>La declaraci\u00f3 var \u00e9s la m\u00e9s antiga i amplament utilitzada abans de l'aparici\u00f3 d'let i const.</li> <li>Les variables declarades amb var tenen visibilitat local i global (veure m\u00e9s endavant), la qual cosa significa que nom\u00e9s tenen visibilitat dins de la funci\u00f3 en qu\u00e8 es declaren.</li> <li>Es pot redeclarar la mateixa variable var sense cap advert\u00e8ncia.</li> <li>Les variables var apliquen \"hoisting\", la qual cosa significa que es poden utilitzar abans de la seva declaraci\u00f3.</li> </ul> <pre><code>function exempleVar() {\n  var x = 10;\n  if (true) {\n    var x = 20; // Aquesta x substitueix la primera x\n  }\n  console.log(x); // Imprimeix 20\n}\n</code></pre> <p>LET Declaraci\u00f3 de Variables Bloc</p> <ul> <li>La declaraci\u00f3 let es va introduir a ES6 (ECMAScript 2015) i \u00e9s preferible a var.</li> <li>Les variables declarades amb let tenen visibilitat de bloc, la qual cosa significa que nom\u00e9s tenen visibilitat dins del bloc (com ara una funci\u00f3 o un bucle) en qu\u00e8 es declaren.</li> <li>No es pot redeclarar la mateixa variable let dins del mateix bloc.</li> <li>Les variables let apliquen hoisting tot i que nom\u00e9s estan disponibles despr\u00e9s de la seva declaraci\u00f3.</li> <li>El seu \u00fas \u00e9s recomanat en detriment de <code>var</code></li> </ul> <pre><code>function exempleLet() {\n  let y = 30;\n  if (true) {\n    let y = 40; // Aquesta y \u00e9s diferent de la primera y\n  }\n  console.log(y); // Imprimeix 30\n}\n</code></pre> <p>CONST Declaraci\u00f3 de Constants</p> <ul> <li>La declaraci\u00f3 const tamb\u00e9 es va introduir a ES6 i s'utilitza per declarar variables amb valors constants que no canviaran.   Les variables declarades amb const tenen tamb\u00e9 visibilitat de bloc com let.</li> <li>No es pot reassignar un nou valor a una variable const despr\u00e9s de la seva inicialitzaci\u00f3. No obstant aix\u00f2, si \u00e9s un objecte o un array, els seus continguts es poden modificar.</li> <li>Les variables const tamb\u00e9 apliquen hoisting i nom\u00e9s estan disponibles despr\u00e9s de la seva declaraci\u00f3.</li> </ul> <pre><code>function exempleConst() {\n  const z = 50;\n  if (true)\n    // No es pot fer aix\u00f2: z = 60; (d\u00f3na error)\n    z = 60;\n  }\n  console.log(z); // Imprimeix 50\n}\n</code></pre> <p>HOISTING</p> <p>Les variables declarades amb let o const s\u00f3n HOISTED SENSE una inicialitzaci\u00f3 per defecte. Aix\u00ed que, accedir-hi abans de la l\u00ednia on s'han declarat falta saltar un un RerenceError: No es pot accedir a 'variable' abans de la inicialitzaci\u00f3. En canvi, les variables declarades amb var s\u00f3n HOISTED AMB una inicialitzaci\u00f3 <code>undefined</code> per defecte. Per tant quan accedim a elles abans de ser declarades, ens torna un <code>undefined</code></p> <p>En resum, utilitza <code>let</code> quan vulguis variables amb \u00e0mbit de bloc i que poden ser reassignades, i utilitza <code>const</code> quan vulguis declarar constants. Evita utilitzar <code>var</code> ja que pot portar a problemes d'\u00e0mbit.</p>"},{"location":"UF1/UF1.2/UF1.2.2_Variables/#conversio-de-variables","title":"Conversi\u00f3 de variables","text":"<ul> <li> <p>En JavaScript, les variables poden ser de diferents tipus, com n\u00fameros, cadenes de text, booleans, etc.</p> </li> <li> <p>Les variables es poden convertir d'un tipus a un altre mitjan\u00e7ant les seg\u00fcents t\u00e8cniques:</p> </li> <li> <p>Coerci\u00f3 impl\u00edcita: JavaScript pot fer conversions autom\u00e0tiques en certes situacions. Per exemple, en una operaci\u00f3 entre un n\u00famero i una cadena de text, JavaScript converteix la cadena de text a n\u00famero si \u00e9s possible.     <pre><code>let num = 42; // Una variable num\u00e9rica\nlet str = '10'; // Una cadena de text que representa un n\u00famero\nlet resultat = num + str; // JavaScript converteix \"str\" a n\u00famero per a la suma\nconsole.log(resultat); // Imprimeix 52, ja que la suma \u00e9s num\u00e8rica\n</code></pre></p> </li> <li> <p>Coerci\u00f3 expl\u00edcita: Pots for\u00e7ar una conversi\u00f3 de tipus mitjan\u00e7ant les funcions <code>Number()</code>, <code>String()</code>, i <code>Boolean()</code>.</p> </li> </ul>"},{"location":"UF1/UF1.2/UF1.2.2_Variables/#equivalents-truthyfalsy","title":"Equivalents Truthy/Falsy","text":"<ul> <li> <p>En JavaScript, les expressions es poden avaluar com a <code>true</code> o <code>false</code> en contextos l\u00f2gics, i aquesta avaluaci\u00f3 es basa en el concepte de equivalents truthy/falsy.</p> </li> <li> <p>Valors que es consideren truthy (\u00e9s a dir, es comporten com a <code>true</code> en un context l\u00f2gic):</p> </li> <li> <p>Tots els valors excepte els que es consideren falsy.</p> </li> <li> <p>Exemples de valors truthy: n\u00fameros no nuls, cadenes de text no buides, objectes, arrays, i m\u00e9s.</p> </li> <li> <p>Valors que es consideren falsy (\u00e9s a dir, es comporten com a <code>false</code> en un context l\u00f2gic):</p> </li> <li> <p>Valors buits com <code>undefined</code>, <code>null</code>, <code>0</code>, <code>NaN</code>, <code>\"\"</code> (una cadena de text buida), i <code>false</code>.</p> </li> <li> <p>Exemples de valors falsy: <code>undefined</code>, <code>null</code>, <code>0</code>, <code>\"\"</code>, <code>false</code>.</p> </li> <li> <p>Pots aprofitar aquesta conversi\u00f3 per simplificar el codi en certs casos.</p> </li> </ul> <p>Per a m\u00e9s detalls i exemples, pots consultar aquest recurs.</p> <p>Aquest resum abasta la conversi\u00f3 de variables i els equivalents truthy/falsy en JavaScript i est\u00e0 en format Markdown. Si necessites m\u00e9s informaci\u00f3 o exemples espec\u00edfics, no dubtis a preguntar!</p>"},{"location":"UF1/UF1.2/UF1.2.2_Variables/#tipat-dinamic","title":"Tipat din\u00e0mic","text":"<p>JavaScript \u00e9s un llenguatge feblement tipat i din\u00e0mic. Les variables a JavaScript no estan associades directament a cap tipus de valor en particular, i a qualsevol variable se li pot assignar (i reassignar) valors de tots els tipus:</p> <pre><code>let foo = 42; // foo ara \u00e9s un n\u00famero\nfoo = 'bar'; // foo ara \u00e9s una cadena de text\nfoo = true; // foo ara \u00e9s un boole\u00e0\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.2_Variables/#recursos-externs","title":"Recursos externs","text":"<ul> <li>Codecademy - Tipus de Dades en JavaScript</li> <li>MDN Web Docs - Estructures de Dades JavaScript</li> </ul>"},{"location":"UF1/UF1.2/UF1.2.2b_Operadors/","title":"Operadors","text":"<p>Els operadors en JavaScript s\u00f3n eines que es utilitzen per realitzar operacions sobre valors. Com les matem\u00e0tiques, els operadors tenen diferents prioritats i, en alguns casos, es poden utilitzar par\u00e8ntesis per canviar la prioritat d'execuci\u00f3. Aqu\u00ed tens una visi\u00f3 general dels operadors m\u00e9s comuns en JavaScript:</p>"},{"location":"UF1/UF1.2/UF1.2.2b_Operadors/#operadors-aritmetics","title":"Operadors Aritm\u00e8tics","text":"<ul> <li><code>+</code> (suma)</li> <li><code>-</code> (resta)</li> <li><code>*</code> (multiplicaci\u00f3)</li> <li><code>/</code> (divisi\u00f3)</li> <li><code>%</code> (m\u00f2dul o residu)</li> <li><code>++</code> (increment)</li> <li><code>--</code> (decrement)</li> <li><code>**</code> (exponenciaci\u00f3)</li> </ul> <p>Exemple d'operadors aritm\u00e8tics:</p> <pre><code>let a = 5;\nlet b = 3;\n\nlet suma = a + b; // 8\nlet resta = a - b; // 2\nlet multiplicacio = a * b; // 15\nlet divisio = a / b; // 1.6666666666666667\nlet modul = a % b; // 2\nlet increment = a++; // (a ara \u00e9s 6)\nlet decrement = b--; // (b ara \u00e9s 2)\nlet exponenciacio = a ** b; // 36\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.2b_Operadors/#operadors-de-cadenes","title":"Operadors de Cadenes","text":"<ul> <li><code>+</code> (concatenaci\u00f3 de cadenes)</li> <li><code>+=</code> (concatenaci\u00f3 i assignaci\u00f3)</li> </ul> <p>Exemple d'operadors de cadenes:</p> <pre><code>let missatge = 'Hola, ' + 'm\u00f3n!'; // \"Hola, m\u00f3n!\"\nlet concatenacioAssignacio = 'Hola, ';\nconcatenacioAssignacio += 'amics!'; // \"Hola, amics!\"\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.2b_Operadors/#operadors-dassignacio","title":"Operadors d'Assignaci\u00f3","text":"<ul> <li><code>=</code> (assignaci\u00f3)</li> <li><code>+=</code> (assignaci\u00f3 i suma)</li> <li><code>-=</code> (assignaci\u00f3 i resta)</li> <li><code>*=</code> (assignaci\u00f3 i multiplicaci\u00f3)</li> <li><code>/=</code> (assignaci\u00f3 i divisi\u00f3)</li> <li><code>%=</code> (assignaci\u00f3 i residu)</li> </ul> <p>Exemple d'operadors d'assignaci\u00f3:</p> <pre><code>let x = 10;\nx += 5; // x ara \u00e9s 15\nx -= 3; // x ara \u00e9s 12\nx *= 2; // x ara \u00e9s 24\nx /= 4; // x ara \u00e9s 6\nx %= 5; // x ara \u00e9s 1\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.2b_Operadors/#operadors-de-comparacio","title":"Operadors de Comparaci\u00f3","text":"<ul> <li><code>==</code> (igual a, compara nom\u00e9s contingut)</li> <li><code>===</code> (igual a estrict, compara tipus i contingut)</li> <li><code>!=</code> (diferent de, compara nom\u00e9s contingut)</li> <li><code>!==</code> (diferent de estrict, compara tipus i contingut)</li> <li><code>&lt;</code> (menor que)</li> <li><code>&gt;</code> (major que)</li> <li><code>&lt;=</code> (menor o igual que)</li> <li><code>&gt;=</code> (major o igual que)</li> </ul> <p>Exemple d'operadors de comparaci\u00f3:</p> <pre><code>let num1 = 5;\nlet num2 = '5';\n\nconsole.log(num1 == num2); // true (contingut igual)\nconsole.log(num1 === num2); // false (tipus diferents)\nconsole.log(num1 != num2); // false (contingut igual)\nconsole.log(num1 !== num2); // true (tipus diferents)\nconsole.log(num1 &lt; num2); // false\nconsole.log(num1 &gt; num2); // false\nconsole.log(num1 &lt;= num2); // true\nconsole.log(num1 &gt;= num2); // true\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.2b_Operadors/#operadors-logics","title":"Operadors L\u00f2gics","text":"<ul> <li><code>&amp;&amp;</code> (AND l\u00f2gic)</li> <li><code>||</code> (OR l\u00f2gic)</li> <li><code>!</code> (NOT l\u00f2gic)</li> </ul> <p>Exemple d'operadors l\u00f2gics:</p> <pre><code>let cert = true;\nlet fals = false;\n\nconsole.log(cert &amp;&amp; fals); // false\nconsole.log(cert || fals); // true\nconsole.log(!cert); // false\n</code></pre> <p>Aquests operadors s\u00f3n fonamentals per a la programaci\u00f3 en JavaScript i es fan servir \u00e0mpliament per realitzar operacions i prendre decisions en el teu codi.</p>"},{"location":"UF1/UF1.2/UF1.2.2b_Operadors/#operadors-binaris-bitwise","title":"Operadors Binaris (Bitwise)","text":"<ul> <li><code>&amp;</code> (AND)</li> <li><code>|</code> (OR)</li> <li> </li> </ul>"},{"location":"UF1/UF1.2/UF1.2.2b_Operadors/#not","title":"<code>~</code> (NOT)","text":""},{"location":"UF1/UF1.2/UF1.2.3_Condicionals/","title":"Sentencies i estructures de control:","text":""},{"location":"UF1/UF1.2/UF1.2.3_Condicionals/#estrucutres-condicionals","title":"Estrucutres Condicionals","text":"<p>El control de flux \u00e9s l'ordre en qu\u00e8 s'executen les declaracions en un programa. Les estructures condicionals alteren aquest flux permetent que nom\u00e9s s'executi el codi si es compleixen certes condicions. Aqu\u00ed tens alguns dels conceptes b\u00e0sics:</p>"},{"location":"UF1/UF1.2/UF1.2.3_Condicionals/#instruccio-if","title":"Instrucci\u00f3 IF","text":"<pre><code>- L'estructura `if` avalua una expressi\u00f3 amb par\u00e8ntesis.\n- Si l'expressi\u00f3 \u00e9s veritat, s'executa el codi dins del bloc `if`.\n- Si l'expressi\u00f3 \u00e9s falsa, el codi del bloc `if` no s'executa.\n\nExemple:\n\n```javascript\nconst correuEnviat = true;\n\nif (correuEnviat) {\n  console.log('Correu enviat al destinatari');\n}\n```\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.3_Condicionals/#instruccio-else","title":"Instrucci\u00f3 ELSE","text":"<pre><code>- Pots afegir un bloc `else` despr\u00e9s d'una instrucci\u00f3 `if`.\n- El bloc `else` s'executa nom\u00e9s si la condici\u00f3 de `if` \u00e9s falsa.\n\nExemple:\n\n```javascript\nconst tascaCompletada = false;\n\nif (tascaCompletada) {\n  console.log('Tasca completada');\n} else {\n  console.log('Tasca incompleta');\n}\n```\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.3_Condicionals/#instruccio-else-if","title":"Instrucci\u00f3 ELSE IF","text":"<ul> <li>Despr\u00e9s d'un bloc <code>if</code>, pots utilitzar m\u00faltiples blocs <code>else if</code> per comprovar condicions addicionals.</li> <li>Un bloc <code>else</code> opcional pot executar-se per defecte si cap de les condicions <code>if</code> o <code>else if</code> s'avalua com a veritat.</li> </ul> <p>Exemple:</p> <pre><code>const mida = 10;\n\nif (mida &gt; 100) {\n  console.log('Gran');\n} else if (mida &gt; 20) {\n  console.log('Mitj\u00e0');\n} else if (mida &gt; 4) {\n  console.log('Petit');\n} else {\n  console.log('Molt petit');\n}\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.3_Condicionals/#operador-ternari","title":"Operador Ternari","text":"<p>Sembla que tens un error en el format del teu contingut Markdown. Per aconseguir l'efecte desitjat amb el format que has proporcionat, has de col\u00b7locar el text i els blocs de codi en llocs adequats. Aqu\u00ed tens el teu contingut amb els canvis necessaris:</p> <p>Com ens ajuden?</p> <p>L'\u00fas d'operadors ternaris pot fer que el codi sigui m\u00e9s conc\u00eds i llegible quan es tracta de condicions senzilles. No obstant aix\u00f2, en casos de condicions m\u00e9s complexes, pot ser m\u00e9s clar utilitzar declaracions <code>if-else</code> convencionals per mantenir el codi m\u00e9s comprensible.</p> <p>L'operador ternari \u00e9s una forma concisa d'expressar condicions en JavaScript:</p> <pre><code>condici\u00f3 ? valorSiCert : valorSiFals;\n</code></pre> <ul> <li>Si la condici\u00f3 \u00e9s certa (avalia a <code>true</code>), s'avalua <code>valorSiCert</code>.</li> <li>Si la condici\u00f3 \u00e9s falsa (avalia a <code>false</code>), s'avalua <code>valorSiFals</code>.</li> </ul> <p>Aix\u00f2 permet definir una expressi\u00f3 que retornar\u00e0 un valor basat en una condici\u00f3 sense la necessitat d'una estructura de control <code>if-else</code>. Aqu\u00ed tens un exemple senzill:</p> <pre><code>const edat = 25;\nconst elegibilitat = edat &gt;= 18 ? '\u00c9s major d'edat' : 'No \u00e9s major d'edat';\nconsole.log(elegibilitat); // Mostrar\u00e0 '\u00c9s major d'edat' ja que la condici\u00f3 \u00e9s certa.\n</code></pre> <p>En aquest exemple, <code>elegibilitat</code> prendr\u00e0 el valor <code>'\u00c9s major d'edat'</code> si <code>edat</code> \u00e9s igual o major de 18, i prendr\u00e0 el valor <code>'No \u00e9s major d'edat'</code> si <code>edat</code> \u00e9s menor que 18.</p> <p>Tamb\u00e9 pots encadenar m\u00faltiples operadors ternaris per aconseguir l'efecte d'un bloc <code>else if</code>. Aqu\u00ed tens un exemple:</p> <pre><code>const puntuaci\u00f3 = 75;\nconst notaFinal =\n  puntuaci\u00f3 &gt;= 90\n    ? 'A'\n    : puntuaci\u00f3 &gt;= 80\n    ? 'B'\n    : puntuaci\u00f3 &gt;= 70\n    ? 'C'\n    : puntuaci\u00f3 &gt;= 60\n    ? 'D'\n    : 'F';\nconsole.log(notaFinal); // Mostrar\u00e0 'C' ja que la puntuaci\u00f3 \u00e9s 75.\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.3_Condicionals/#instruccio-switch","title":"Instrucci\u00f3 switch","text":"<ul> <li>L'estructura <code>switch</code> et permet comprovar una expressi\u00f3 contra diversos casos.</li> <li>Cada cas pot contenir codi que s'executa si la coincid\u00e8ncia \u00e9s veritat.</li> <li>Utilitza <code>break</code> per sortir del <code>switch</code> o continua amb altres casos.</li> </ul> <p>Exemple:</p> <pre><code>const menjar = 'amanida';\n\nswitch (menjar) {\n  case 'ostres':\n    console.log('El gust del mar \ud83e\uddaa');\n    break;\n  case 'pizza':\n    console.log('Una deliciosa pizza \ud83c\udf55');\n    break;\n  default:\n    console.log('Bonic \u00e0pat');\n}\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.3_Condicionals/#operadors-logics","title":"Operadors L\u00f2gics","text":"<ul> <li>Utilitza els operadors l\u00f2gics com <code>&amp;&amp;</code> (i), <code>||</code> (o) i <code>!</code> (no) per a realitzar operacions l\u00f2giques entre valors booleans o avaluacions.</li> </ul> <p>Exemple:</p> <pre><code>true &amp;&amp; true; // true\n1 &gt; 2 &amp;&amp; 2 &gt; 1; // false\ntrue || false; // false\n!true; // false\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.3_Condicionals/#operadors-de-comparacio","title":"Operadors de Comparaci\u00f3","text":"<ul> <li>Utilitza operadors com <code>===</code>, <code>!==</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code> i <code>&lt;=</code> per comparar valors i obtenir un resultat boolean.</li> </ul> <p>Exemple:</p> <pre><code>1 &gt; 3; // false\n3 &gt; 1; // true\n250 &gt;= 250; // true\n1 === 1; // true\n1 === 2; // false\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.3_Condicionals/#truthy-i-falsy","title":"\"Truthy\" i \"Falsy\"","text":"<ul> <li>A JavaScript, els valors es poden avaluar com a veritat (Truthy) o falsedat (Falsy).</li> </ul> <p>Exemple:</p> <pre><code>const valor = 0;\n\nif (valor) {\n  console.log('El valor \u00e9s veritat');\n} else {\n  console.log('El valor \u00e9s falsedat');\n}\n</code></pre> Falsy Truthy <code>false</code> Qualsevol valor que no sigui fals <code>0</code> (zero) Nombres diferents de zero (exemples: 1, -1) <code>-0</code> (zero negatiu) <code>0.1</code> <code>0n</code> (BigInt zero) Qualsevol cadena de text no buida (exemple: \"hola\") <code>''</code>, <code>\"\"</code>, `` (cadena de text buida) <code>null</code> <code>null</code> <code>undefined</code> <code>undefined</code> <code>NaN</code> (No \u00e9s un n\u00famero) <code>NaN</code> (No \u00e9s un n\u00famero) Qualsevol altra cosa (exemples: '0', 'false', [], {})"},{"location":"UF1/UF1.2/UF1.2.4_Bucles/","title":"Sentencies i estructures de control","text":""},{"location":"UF1/UF1.2/UF1.2.4_Bucles/#estructures-repetitives","title":"Estructures Repetitives","text":"<p>Les estructures de repetici\u00f3 permeten executar un conjunt d'instruccions de manera repetida fins que es compleixi una condici\u00f3 espec\u00edfica.</p>"},{"location":"UF1/UF1.2/UF1.2.4_Bucles/#while","title":"While:","text":"<ul> <li>El bucle <code>while</code> executa un bloc de codi mentre una condici\u00f3 sigui certa. La condici\u00f3 s'avalua abans de cada iteraci\u00f3.</li> </ul> <p>Exemple:</p> <pre><code>let i = 0;\n\nwhile (i &lt; 5) {\n  console.log(i);\n  i++;\n}\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.4_Bucles/#dowhile","title":"Do...While","text":"<ul> <li>El bucle <code>do...while</code> executa un bloc de codi almenys una vegada i despr\u00e9s verifica si una condici\u00f3 \u00e9s certa per a les iteracions seg\u00fcents. La condici\u00f3 es comprova despr\u00e9s de cada iteraci\u00f3.</li> </ul> <p>Exemple:</p> <pre><code>let x = 0;\nlet i = 0;\n\ndo {\n  x = x + i;\n  console.log(x);\n  i++;\n} while (i &lt; 5);\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.4_Bucles/#for","title":"For","text":"<ul> <li>El bucle <code>for</code> \u00e9s una estructura de repetici\u00f3 que consta de tres parts: inicialitzaci\u00f3, condici\u00f3 i increment. \u00c9s \u00fatil quan coneixem el nombre d'iteracions.</li> </ul> <p>Exemple:</p> <pre><code>for (let i = 0; i &lt; 4; i++) {\n  console.log(i);\n}\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.4_Bucles/#for-invertit","title":"For Invertit","text":"<ul> <li>Es pot utilitzar un bucle <code>for</code> per iterar en sentit invers inicialitzant la variable d'iteraci\u00f3 amb un valor inicial m\u00e0xim i decrementant-la.</li> </ul> <p>Exemple:</p> <pre><code>const items = ['albercoc', 'banana', 'canya'];\n\nfor (let i = items.length - 1; i &gt;= 0; i--) {\n  console.log(`${i}. ${items[i]}`);\n}\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.4_Bucles/#for-each","title":"For Each","text":"<ul> <li>A partir de JavaScript ES6, pots utilitzar el m\u00e8tode <code>forEach</code> en els arrays per a iterar a trav\u00e9s dels seus elements sense necessitat d'un \u00edndex.</li> </ul> <p>Exemple:</p> <pre><code>const colors = ['vermell', 'blau', 'verd'];\n\ncolors.forEach(function (color) {\n  console.log(color);\n});\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.4_Bucles/#break","title":"Break","text":"<ul> <li>La paraula clau <code>break</code> s'utilitza per sortir immediatament d'un bucle quan es compleix una condici\u00f3 espec\u00edfica.</li> </ul> <p>Exemple:</p> <pre><code>for (let i = 0; i &lt; 99; i++) {\n  if (i &gt; 5) {\n    break;\n  }\n  console.log(i);\n}\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.4_Bucles/#bucle-anidat-nested-loop","title":"Bucle Anidat (\"Nested Loop\")","text":"<ul> <li>Un bucle anidat \u00e9s quan un bucle s'executa dins un altre. L'iteraci\u00f3 interior s'executa completament per a cada iteraci\u00f3 de l'iteraci\u00f3 exterior.</li> </ul> <p>Exemple:</p> <pre><code>for (let outer = 0; outer &lt; 2; outer++) {\n  for (let inner = 0; inner &lt; 3; inner++) {\n    console.log(`${outer}-${inner}`);\n  }\n}\n</code></pre> <p>Aquest ordre d'aprenentatge \u00e9s progressiu, comen\u00e7ant amb les estructures de repetici\u00f3 b\u00e0siques com <code>while</code>, <code>do...while</code> i <code>for</code>, i avan\u00e7ant cap a conceptes m\u00e9s avan\u00e7ats com <code>forEach</code>, <code>break</code> i bucles anidats. Aquestes estructures s\u00f3n fonamentals per a la programaci\u00f3 i l'automatitzaci\u00f3 de tasques repetitives en JavaScript.</p>"},{"location":"UF1/UF1.2/UF1.2.5_Scope_Ambit/","title":"Scope - \u00c0mbit de Variable","text":"<p>JavaScript \u00e9s un llenguatge fortament orientat a funcions. Ens d\u00f3na molta llibertat. Una funci\u00f3 es pot crear en qualsevol moment, passar com a argument a una altra funci\u00f3 i despr\u00e9s cridar-la des d'un lloc del codi totalment diferent m\u00e9s endavant.</p> <p>Sabem que una funci\u00f3 pot accedir a variables fora d'ella. Per\u00f2, qu\u00e8 passa si aquestes variables \"externes\" canvien des que es crea una funci\u00f3? La funci\u00f3 veur\u00e0 els valors nous o els antics?</p> <p>I si una funci\u00f3 es passa com a par\u00e0metre i es crida des d'un altre lloc del codi, tindr\u00e0 acc\u00e9s a les variables externes en el nou lloc?</p>"},{"location":"UF1/UF1.2/UF1.2.5_Scope_Ambit/#blocs-de-codi-block-scope","title":"Blocs de codi (Block Scope)","text":"<p>Si una variable es declara dins d'un bloc de codi `{...}``, nom\u00e9s \u00e9s visible dins d'aquest bloc.</p> <p>Per exemple:</p> <pre><code>{\n  // fer una feina amb variables locals que no haurien de veure's fora\n  let missatge = 'Hola'; // nom\u00e9s visible en aquest bloc\n  alert(missatge); // Hola\n}\n\nalert(missatge); // Error: el missatge no s'ha definit (undefined)\n</code></pre> <p>Aix\u00f2 ho podem utilitzar per a\u00efllar un fragment de codi que realitza la seva pr\u00f2pia tasca, amb variables pr\u00f2pies:</p> <pre><code>{\n  // veure missatge\n  let missatge = 'Hola';\n  alert(missatge);\n}\n\n{\n  // veure un altre missatge\n  let missatge = 'Ad\u00e9u';\n  alert(missatge);\n}\n</code></pre> <p>Sense blocs, hi hauria un error:</p> <pre><code>// veure missatge\nlet missatge = 'Hola';\nalert(missatge);\n\n// veure un altre missatge\nlet missatge = 'Ad\u00e9u'; // Error: la variable ja ha estat declarada\nalert(missatge);\n</code></pre> <p>Per a <code>if</code>, <code>for</code>, <code>while</code> i altres, les variables declarades dins de `{...}`` tamb\u00e9 nom\u00e9s s\u00f3n visibles a l'interior:</p> <pre><code>if (true) {\n  let frase = '\u00a1Hola!';\n\n  alert(frase); // \u00a1Hola!\n}\n\nalert(frase); // Error, no existeix aquesta variable!\n</code></pre> <p>Aqu\u00ed, despr\u00e9s que acabi <code>if</code>, l'alerta seg\u00fcent no veur\u00e0 la <code>frase</code>, d'aqu\u00ed l'error.</p> <p>Aix\u00f2 \u00e9s genial, ja que ens permet crear variables locals de bloc, espec\u00edfiques d'una branca <code>if</code>.</p> <p>La mateixa l\u00f2gica es segueix per als bucles <code>for</code> i <code>while</code>:</p> <pre><code>for (let i = 0; i &lt; 3; i++) {\n  // la variable \"i\" nom\u00e9s \u00e9s visible dins d'aquest for\n  alert(i); // 0, despr\u00e9s 1, despr\u00e9s 2\n}\n\nalert(i); // Error, aquesta variable no existeix!\n</code></pre> <p>Visualment, <code>let i</code> est\u00e0 fora de {...}; per\u00f2 la construcci\u00f3 <code>for</code> \u00e9s especial aqu\u00ed: la variable declarada dins d'ella es considera part del bloc.</p>"},{"location":"UF1/UF1.2/UF1.2.5_Scope_Ambit/#ambit-de-funcions-funcions-niades-nested-functions","title":"\u00c0mbit de funcions - Funcions Niades (Nested Functions)","text":"<p>Una funci\u00f3 es diu \"niada\" (de \"niu\"), o \"nested\" en angl\u00e8s, quan es crea dins d'una altra funci\u00f3.</p> <p>\u00c9s f\u00e0cil fer-ho amb JavaScript. Ho podem fer servir per organitzar el nostre codi:</p> <pre><code>function dirHolaAd\u00e9u(nom, cognom) {\n  // funci\u00f3 anidada auxiliar per a usar a continuaci\u00f3\n  function obtenirNomComplet() {\n    return nom + ' ' + cognom;\n  }\n\n  alert('Hola, ' + obtenirNomComplet());\n  alert('Ad\u00e9u, ' + obtenirNomComplet());\n}\n</code></pre> <p>Aqu\u00ed, la funci\u00f3 <code>obtenirNomComplet()</code> pot accedir a les variables externes i, per tant, pot retornar el nom complet. Les funcions niades s\u00f3n bastant comunes en JavaScript.</p> <p>El que \u00e9s molt m\u00e9s interessant \u00e9s que podem retornar una funci\u00f3 niada: ja sigui com a propietat d'un objecte nou o com a resultat en si mateixa. Llavors es pot fer servir en un altre lloc. No importa on, encara t\u00e9 acc\u00e9s a les mateixes variables externes.</p> <p>A continuaci\u00f3, <code>makeCounter</code> crea la funci\u00f3 \"comptador\" que retorna el seg\u00fcent n\u00famero en cada invocaci\u00f3:</p> <pre><code>function makeCounter() {\n  let comptador = 0;\n\n  return function () {\n    return comptador++;\n  };\n}\n\nlet comptador = makeCounter();\n\nalert(comptador()); // 0\nalert(comptador()); // 1\nalert(comptador()); // 2\n</code></pre> <p>Malgrat ser un codi simple, variants lleugerament modificades d'aquest codi tenen usos pr\u00e0ctics, com ara un generador de nombres aleatoris per a proves automatitzades.</p> <p>Com funciona aix\u00f2? Si creem m\u00faltiples comptadors, seran independents? Qu\u00e8 est\u00e0 passant amb les variables aqu\u00ed? Entengue-m'ho:</p>"},{"location":"UF1/UF1.2/UF1.2.5_Scope_Ambit/#ambit-o-scope-lexic","title":"\u00c0mbit o \"Scope\" l\u00e8xic","text":"<p>Pas 1: Variables</p> <p>A JavaScript, cada funci\u00f3 en execuci\u00f3, el bloc de codi <code>{...}</code>, i l'script en el seu conjunt tenen un objecte intern (ocult) associat anomenat \"\u00c0mbit L\u00e8xic\" o \"\u00c0mbit Lexical\".</p> <p>Una \u201cvariable\u201d \u00e9s nom\u00e9s una propietat de l'objecte intern, el \"Registre d'entorn\". Obtenir o canviar una variable significa obtenir o canviar una propietat d'aquest objecte.</p> <pre><code>// Exemple de variable d'\u00e0mbit l\u00e8xic global\nlet missatge = 'Hola'; // Variable global\n\nfunction saludar() {\n  // Exemple de variable d'\u00e0mbit l\u00e8xic local\n  let nom = 'Andreu'; // Variable local a la funci\u00f3\n  console.log(missatge); // Accedim a la variable global\n  console.log(nom); // Accedim a la variable local\n}\n\nsaludar();\nconsole.log(missatge); // Podem accedir a la variable global fora de la funci\u00f3\nconsole.log(nom); // Aix\u00f2 genera un error, ja que 'nom' nom\u00e9s \u00e9s visible dins de la funci\u00f3\n</code></pre> <p>Pas 2: Declaraci\u00f3 de Funcions</p> <p>Una funci\u00f3 tamb\u00e9 \u00e9s un valor, com una variable. La difer\u00e8ncia \u00e9s que una declaraci\u00f3 de funci\u00f3 s'inicialitz completament en el moment de la creaci\u00f3. Per aix\u00f2 podem cridar-les abans de la seva declaraci\u00f3 a difer\u00e8ncia de <code>let</code>que no es pot usar fins la seva declaraci\u00f3 (hoisting).</p> <pre><code>saludar();\n\nfunction saludar() {\n  console.log('Hola, Joan!');\n}\n</code></pre> <p>Pas 3: \u00c0mbit L\u00e8xic Intern i Extern</p> <p>Quan s'executa una funci\u00f3, al comen\u00e7ament de la trucada, es crea autom\u00e0ticament un nou \u00e0mbit l\u00e8xic per emmagatzemar variables i par\u00e0metres locals.</p> <pre><code>function saludar(nom) {\n  let missatge = 'Hola'; // Variable local a la funci\u00f3\n  console.log(missatge + ' ' + nom);\n}\n\nsaludar('Maria'); // \"Hola Maria\"\nsaludar('Pere'); // \"Hola Pere\"\n</code></pre> <p>L'\u00e0mbit l\u00e8xic intern t\u00e9 una refer\u00e8ncia a l'\u00e0mbit l\u00e8xic extern.</p> <p>Quan el codi vol accedir a una variable: primer la busca a l'\u00e0mbit l\u00e8xic intern, despr\u00e9s l'extern, despr\u00e9s el m\u00e9s extern, i aix\u00ed successivament fins arribar a l'\u00e0mbit global.</p> <pre><code>function exterior() {\n  let variableExterior = 'Fora';\n\n  function interior() {\n    let variableInterior = 'Dins';\n    console.log(variableExterior); // Accedim a la variable de l'\u00e0mbit exterior\n    console.log(variableInterior);\n  }\n\n  interior();\n}\n\nexterior();\n</code></pre> <p>Pas 4: Retornar una Funci\u00f3</p> <p>Les funcions recorden l'\u00e0mbit l\u00e8xic en qu\u00e8 van ser creades. Aix\u00f2 permet que les funcions mantinguin refer\u00e8ncia als valors de les seves variables parentals encara que es cridin en altres llocs.</p> <p>Una variable s'actualitza a l'entorn l\u00e8xic en qu\u00e8 es troba, no en l'entorn l\u00e8xic en qu\u00e8 es va crear.</p> <pre><code>function crearComptador() {\n  let contador = 0;\n\n  return function () {\n    contador++;\n    return contador;\n  };\n}\n\nlet comptadorA = crearComptador();\nconsole.log(comptadorA()); // 1\nconsole.log(comptadorA()); // 2\n\nlet comptadorB = crearComptador();\nconsole.log(comptadorB()); // 1 (un altre comptador independent)\n</code></pre> <p>Concepte Closure</p> <p>Existeix un terme general en programaci\u00f3 conegut com a closure (clausures) que els desenvolupadors solen con\u00e8ixer.</p> <p>Una clausura \u00e9s una funci\u00f3 que recorda les seves variables externes i pot accedir-hi. En alguns llenguatges, aix\u00f2 no \u00e9s possible o una funci\u00f3 ha d'escriure's d'una manera especial perqu\u00e8 aix\u00f2 passi. No obstant aix\u00f2, com acabem d'explicar, a JavaScript totes les funcions s\u00f3n clausures naturals (nom\u00e9s hi ha una excepci\u00f3, que es cobrir\u00e0 en la sintaxi \"new Function\").</p> <p>En altres paraules, recorden autom\u00e0ticament on es van crear utilitzant una propietat oculta [[Environment]], i despr\u00e9s el seu codi pot accedir a les variables externes.</p> <p>Les clausures s\u00f3n \u00fatils per a moltes altres coses tamb\u00e9, com gestionar estat en funcions d'ajust, crear constructors d'objectes amb m\u00e8todes privats, i molt m\u00e9s.</p> <p>Teniu una molt bona explicaci\u00f3 en aquest v\u00eddeo:</p> <p>Tamb\u00e9 de manera detallada al seg\u00dcent article \u00c1mbito o Alcance l\u00e9xico (Closures).</p>"},{"location":"UF1/UF1.2/UF1.2.6_Gestio_Errors/","title":"Gesti\u00f3 d'Errors","text":""},{"location":"UF1/UF1.2/UF1.2.6_Gestio_Errors/#referenceerror","title":"ReferenceError","text":"<ul> <li>Un ReferenceError \u00e9s un tipus d'error que es produeix quan es fa servir una variable que no existeix.</li> <li>Per prevenir aquest error, totes les variables han de ser declarades pr\u00e8viament.</li> </ul> <pre><code>// Exemple de ReferenceError a JavaScript\nlet firstName = 'John';\n\n// Aqu\u00ed obtenim un ReferenceError perqu\u00e8 lastName no ha estat declarada\nconsole.log(firstName + lastName);\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.6_Gestio_Errors/#syntaxerror","title":"SyntaxError","text":"<ul> <li>Un SyntaxError \u00e9s un tipus d'error que es produeix quan hi ha errors de sintaxi en el codi, creant codi inv\u00e0lid que no pot ser interpretat pel compilador.</li> <li>Algunes causes comunes d'un SyntaxError s\u00f3n: falta de par\u00e8ntesis, claud\u00e0tors o cometes, falta de punts i coma o errors d'ortografia en noms de variables o funcions.</li> </ul> <pre><code>// Exemple de SyntaxError a JavaScript\n// Falta dos punts despr\u00e9s del par\u00e8ntesi de tancament\nfunction suma(a, b)\n  return a + b;\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.6_Gestio_Errors/#typeerror","title":"TypeError","text":"<ul> <li>Un TypeError \u00e9s un tipus d'error que es produeix quan s'intenta realitzar una operaci\u00f3 en un valor del tipus incorrecte.</li> <li>Un exemple de TypeError \u00e9s utilitzar un m\u00e8tode de cadena en un valor num\u00e8ric.</li> </ul> <pre><code>// Exemple de TypeError a JavaScript\nlet nombre = 1;\nlet cadena = 'un';\n\n// Aqu\u00ed intentem concatenar el nombre i la cadena, la qual cosa provocar\u00e0 un TypeError\nconsole.log(nombre + cadena);\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.6_Gestio_Errors/#error-en-temps-dexecucio-a-javascript","title":"Error en temps d'execuci\u00f3 a JavaScript","text":"<ul> <li>Un error en temps d'execuci\u00f3 a JavaScript \u00e9s un error que es produeix mentre s'est\u00e0 executant el codi.</li> <li>Alguns errors en temps d'execuci\u00f3 s\u00f3n objectes integrats a JavaScript amb una propietat de nom i missatge. Qualsevol codi despr\u00e9s d'un error en temps d'execuci\u00f3 no es processar\u00e0.</li> </ul>"},{"location":"UF1/UF1.2/UF1.2.6_Gestio_Errors/#la-paraula-clau-throw-a-javascript","title":"La paraula clau \"throw\" a JavaScript","text":"<ul> <li>La paraula clau \"throw\" es col\u00b7loca abans d'una crida a la funci\u00f3 Error() o d'un objecte per construir i llan\u00e7ar un error.</li> <li>Un cop s'ha llan\u00e7at un error, el programa s'atura i qualsevol codi seg\u00fcent no s'executar\u00e0.</li> </ul> <pre><code>// El programa llan\u00e7ar\u00e0 i mostrar\u00e0 aquest objecte Error amb el missatge 'Alguna cosa ha anat malament'\nthrow Error('Alguna cosa ha anat malament');\n\n// El programa s'aturar\u00e0 despr\u00e9s de llan\u00e7ar un error i no es mostrar\u00e0 el seg\u00fcent codi.\nconsole.log('Aix\u00f2 no es mostrar\u00e0');\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.6_Gestio_Errors/#la-funcio-error-a-javascript","title":"La funci\u00f3 \"Error\" a JavaScript","text":"<ul> <li>La funci\u00f3 \"Error\" a JavaScript crea un objecte d'error amb un missatge personalitzat. Aquesta funci\u00f3 rep un argument de cadena que esdev\u00e9 el valor de la propietat de missatge de l'error.</li> <li>Un error creat amb aquesta funci\u00f3 no atura l'execuci\u00f3 del programa a menys que s'utilitzi la paraula clau \"throw\" per llan\u00e7ar l'error.</li> </ul> <pre><code>console.log(Error('La teva contrasenya \u00e9s massa feble.')); // Error: La teva contrasenya \u00e9s massa feble.\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.6_Gestio_Errors/#la-sentencia-trycatch-a-javascript","title":"La sent\u00e8ncia \"try...catch\" a JavaScript","text":"<ul> <li>Una sent\u00e8ncia \"try...catch\" a JavaScript permet anticipar i gestionar els errors llan\u00e7ats (ja siguin errors integrats o constru\u00efts amb Error()) mentre permet que el programa continu\u00ef executant-se.</li> <li>El codi que pot generar un error es col\u00b7loca dins del bloc \"try\", i les accions per gestionar aquests errors es col\u00b7loquen dins del bloc \"catch\".</li> </ul> <pre><code>// Una sent\u00e8ncia try...catch que llen\u00e7a un Error constru\u00eft\ntry {\n  throw Error('Aquest error constru\u00eft ser\u00e0 capturat');\n} catch (e) {\n  console.log(e); // Mostra l'objecte Error llan\u00e7at\n}\n\n// Una sent\u00e8ncia try...catch que llan\u00e7a un error integrat\nlet cadenaFixa = 'No es pot reassignar';\ntry {\n  cadenaFixa = 'Una nova cadena'; // Es llan\u00e7ar\u00e0 un TypeError\n} catch (e) {\n  console.log('Ha ocorregut un error!'); // Mostra 'Ha ocorregut un error!'\n}\n\nconsole.log('Es mostra despr\u00e9s de l'error'); // El programa continua executant-se\n</code></pre>"},{"location":"UF1/UF1.2/UF1.2.6_Gestio_Errors/#documentacio-de-javascript","title":"Documentaci\u00f3 de JavaScript","text":"<ul> <li>Moltes vegades, podem seguir la pista als errors, per\u00f2 encara estar confosos sobre com resoldre'ls. En aquestes situacions, podem consultar la documentaci\u00f3. Per a JavaScript, la documentaci\u00f3 web de JavaScript de MDN \u00e9s una eina poderosa. Si encara estem confosos despr\u00e9s de mirar-ho, podem anar a StackOverflow, un f\u00f2rum de preguntes i respostes on els programadors publiquen problemes i altres programadors discuteixen i voten solucions.</li> </ul>"},{"location":"UF1/UF1.3/UF1.3.1_Number/","title":"Number","text":"<p>L'objecte <code>Number</code> a JavaScript \u00e9s un objecte incorporat que s'utilitza per treballar amb valors num\u00e8rics i realitzar operacions matem\u00e0tiques. Tot i que els n\u00fameros a JavaScript tamb\u00e9 es poden representar com a valors primitius (n\u00fameros), l'objecte <code>Number</code> proporciona m\u00e8todes i propietats addicionals per realitzar tasques espec\u00edfiques amb n\u00fameros.</p> <p>Creaci\u00f3 d'un Objecte Number</p> <p>Podeu crear un objecte <code>Number</code> utilitzant el constructor <code>Number()</code> o simplement declarant un valor num\u00e8ric:</p> <pre><code>const num1 = new Number(42); // Crear un objecte Number\nconst num2 = 3.14; // Declarar un valor num\u00e8ric (primitiu)\n</code></pre> <p>Propietats de l'Objecte Number</p> <p>L'objecte <code>Number</code> t\u00e9 algunes propietats \u00fatils que podeu utilitzar:</p> <ul> <li><code>Number.MAX_VALUE</code>: El valor num\u00e8ric m\u00e9s gran representable a JavaScript.</li> <li><code>Number.MIN_VALUE</code>: El valor num\u00e8ric m\u00e9s petit representable a JavaScript.</li> <li><code>Number.POSITIVE_INFINITY</code>: Representa l'infinit positiu.</li> <li><code>Number.NEGATIVE_INFINITY</code>: Representa l'infinit negatiu.</li> <li><code>Number.NaN</code>: Representa \"No \u00e9s un n\u00famero\" (NaN).</li> </ul> <pre><code>console.log(Number.MAX_VALUE); // 1.7976931348623157e+308\nconsole.log(Number.MIN_VALUE); // 5e-324\nconsole.log(Number.POSITIVE_INFINITY); // Infinity\nconsole.log(Number.NEGATIVE_INFINITY); // -Infinity\nconsole.log(Number.NaN); // NaN\n</code></pre> <p>M\u00e8todes de l'Objecte Number</p> <p>L'objecte <code>Number</code> tamb\u00e9 proporciona m\u00e8todes per realitzar operacions comunes amb n\u00fameros:</p> <ul> <li><code>toFixed()</code>: Converteix un n\u00famero en una cadena, arrodonint-lo a un nombre espec\u00edfic de decimals.</li> <li><code>toPrecision()</code>: Converteix un n\u00famero en una cadena, especificant el nombre total de d\u00edgits (incloent decimals).</li> <li><code>toString()</code>: Converteix un n\u00famero en una cadena.</li> <li><code>parseFloat()</code>: Converteix una cadena en un nombre de punt flotant.</li> <li><code>parseInt()</code>: Converteix una cadena en un nombre enter.</li> <li><code>isNaN()</code>: Verifica si un valor \u00e9s NaN (No \u00e9s un n\u00famero).</li> </ul> <pre><code>const numero = 123.456789;\n\nconsole.log(numero.toFixed(2)); // \"123.46\"\nconsole.log(numero.toPrecision(4)); // \"123.5\"\nconsole.log(numero.toString()); // \"123.456789\"\nconsole.log(parseFloat('3.14')); // 3.14\nconsole.log(parseInt('42')); // 42\nconsole.log(isNaN('Hola')); // true (no es pot convertir en n\u00famero)\n</code></pre> <p>Propietats i M\u00e8todes Est\u00e0tics</p> <p>L'objecte <code>Number</code> tamb\u00e9 t\u00e9 propietats i m\u00e8todes est\u00e0tics que no estan relacionats amb inst\u00e0ncies espec\u00edfiques. Alguns exemples s\u00f3n:</p> <ul> <li><code>Number.parseFloat()</code>: Converteix una cadena en un nombre de punt flotant.</li> <li><code>Number.parseInt()</code>: Converteix una cadena en un nombre enter.</li> <li><code>Number.isNaN()</code>: Verifica si un valor \u00e9s NaN (No \u00e9s un n\u00famero).</li> <li><code>Number.isFinite()</code>: Verifica si un valor \u00e9s un nombre finit.</li> </ul> <pre><code>console.log(Number.parseFloat('3.14')); // 3.14\nconsole.log(Number.parseInt('42')); // 42\nconsole.log(Number.isNaN('Hola')); // false (no \u00e9s NaN)\nconsole.log(Number.isFinite(5)); // true (\u00e9s finit)\n</code></pre> <p>Recursos</p> <p>MDN Web Docs - Number</p> <p>W3Schools - JavaScript Number Reference</p> <p>ECMAScript Language Specification - Number Object</p> <p>JavaScript.Info - Numbers</p>"},{"location":"UF1/UF1.3/UF1.3.2_String/","title":"String","text":"<p>L'objecte <code>String</code> en JavaScript s'utilitza per emmagatzemar i manipular seq\u00fc\u00e8ncies de car\u00e0cters, com text. Les cadenes de car\u00e0cters s\u00f3n una part fonamental de qualsevol llenguatge de programaci\u00f3 i es fan servir \u00e0mpliament en desenvolupament web i altres aplicacions. Aqu\u00ed tens informaci\u00f3 sobre la creaci\u00f3, propietats, m\u00e8todes i recursos relacionats amb les cadenes de car\u00e0cters a JavaScript.</p> <p>Creaci\u00f3 d'un Objecte String</p> <p>Pots crear un objecte <code>String</code> de diverses maneres a JavaScript:</p> <ol> <li> <p>Amb literals de cadenes:</p> <pre><code>const cadenaLiteral = 'Aix\u00f2 \u00e9s una cadena literal.';\n</code></pre> </li> <li> <p>Amb el constructor <code>String()</code>:</p> <pre><code>const cadenaConstructor = new String(\n  'Aix\u00f2 \u00e9s una cadena creada amb el constructor String().'\n);\n</code></pre> </li> <li> <p>Amb una conversi\u00f3 de variable:</p> <pre><code>const variable = 42;\nconst cadenaDeVariable = String(variable);\n</code></pre> </li> </ol> <p>Propietats Importants de l'Objecte String</p> <ul> <li><code>length</code>: Retorna la longitud de la cadena.</li> </ul> <pre><code>const cadena = 'Hola, m\u00f3n!';\nconsole.log(cadena.length); // Mostra 11\n</code></pre> <p>Propietat o M\u00e8tode</p> <p>Propietat vs M\u00e8tode: Tot i que la difer\u00e8ncia sembla subtil, \u00e9s una q\u00fcesti\u00f3 de sem\u00e0ntica i de la manera com s'utilitza cada un. Les propietats s\u00f3n generalment valors que descriuen o caracteritzen l'objecte, mentre que els m\u00e8todes s\u00f3n funcions que realitzen operacions sobre l'objecte.</p> <p>M\u00e8todes Importants de l'Objecte String</p> <p>L'objecte <code>String</code> ofereix una gran varietat de m\u00e8todes per a treballar amb cadenes. Aqu\u00ed en tens alguns exemples:</p> <ul> <li><code>charAt(index)</code>: Retorna el car\u00e0cter a l'\u00edndex especificat.</li> </ul> <pre><code>const cadena = 'JavaScript';\nconsole.log(cadena.charAt(2)); // Mostra \"v\"\n</code></pre> <ul> <li><code>substring(start, end)</code>: Retorna una part de la cadena entre les posicions d'inici i fi.</li> </ul> <pre><code>const cadena = 'Hola, m\u00f3n!';\nconst subcadena = cadena.substring(0, 4);\nconsole.log(subcadena); // Mostra \"Hola\"\n</code></pre> <ul> <li><code>toUpperCase()</code>: Converteix tots els car\u00e0cters a maj\u00fascules.</li> </ul> <pre><code>const minuscula = 'javascript';\nconst majuscules = minuscula.toUpperCase();\nconsole.log(majuscules); // Mostra \"JAVASCRIPT\"\n</code></pre> <p>Recursos per a l'Objecte String</p> <p>Pots consultar m\u00e9s m\u00e8todes i informaci\u00f3 addicional sobre <code>String</code>:</p> <ol> <li> <p>MDN Web Docs - String</p> </li> <li> <p>W3Schools - JavaScript String Reference:</p> </li> <li> <p>ECMAScript Language Specification - String Object</p> </li> <li> <p>JavaScript.Info - Strings</p> </li> </ol>"},{"location":"UF1/UF1.3/UF1.3.3_Date/","title":"Date","text":"<p>L'objecte <code>Date</code> \u00e9s una part important de JavaScript que s'utilitza per a la gesti\u00f3 de dates i hores. Permet crear i manipular dates, calcular intervals de temps i realitzar diverses operacions relacionades amb el temps.</p> <p>Creaci\u00f3 d'un Objecte <code>Date</code></p> <p>Pots crear un objecte <code>Date</code> de diverses maneres a JavaScript:</p> <ol> <li>Utilitzant el Constructor <code>Date()</code>:</li> </ol> <pre><code>const avui = new Date(); // Crea un objecte Date que representa la data i hora actual.\n</code></pre> <ol> <li>Especificant una Data i Hora:</li> </ol> <pre><code>const dataPersonalitzada = new Date('2023-09-24T10:30:00'); // Crea un objecte Date per a una data i hora espec\u00edfiques.\n</code></pre> <p>Propietats i M\u00e8todes Importants de l'Objecte Date</p> <p>L'objecte <code>Date</code> proporciona una s\u00e8rie de propietats i m\u00e8todes per a treballar amb dates i hores. Aqu\u00ed tens alguns exemples:</p> <ul> <li><code>getFullYear()</code>: Retorna l'any de la data.</li> </ul> <pre><code>const avui = new Date();\nconst any = avui.getFullYear();\nconsole.log(any); // Mostra l'any actual\n</code></pre> <ul> <li><code>getMonth()</code>: Retorna el mes de la data (de 0 a 11).</li> </ul> <pre><code>const avui = new Date();\nconst mes = avui.getMonth();\nconsole.log(mes); // Mostra el mes actual (0 correspon a gener, 11 a desembre)\n</code></pre> <ul> <li><code>getDate()</code>: Retorna el dia del mes de la data.</li> </ul> <pre><code>const avui = new Date();\nconst dia = avui.getDate();\nconsole.log(dia); // Mostra el dia del mes actual\n</code></pre> <p>Recursos per a l'Objecte Date</p> <ol> <li> <p>MDN Web Docs - Date</p> </li> <li> <p>W3Schools - JavaScript Date Reference</p> </li> <li> <p>ECMAScript Language Specification - Date Object</p> </li> <li> <p>JavaScript.Info - Date and Time</p> </li> </ol>"},{"location":"UF1/UF1.3/UF1.3.4_Math/","title":"Math","text":"<p>L'objecte <code>Math</code> \u00e9s un objecte incorporat en JavaScript que proporciona una gran quantitat de m\u00e8todes i constants per a realitzar operacions matem\u00e0tiques complexes. Aquest objecte \u00e9s \u00e0mpliament utilitzat per a realitzar c\u00e0lculs i operacions matem\u00e0tiques avan\u00e7ades.</p> <p>Creaci\u00f3 d'un Objecte <code>Math</code></p> <p>L'objecte <code>Math</code> no es crea com altres objectes a JavaScript. Es tracta d'un objecte global que ja est\u00e0 disponible sense necessitat de crear-ne una inst\u00e0ncia.</p> <p>M\u00e8todes Importants de l'Objecte Math</p> <p>L'objecte <code>Math</code> proporciona una gran varietat de m\u00e8todes per a realitzar operacions matem\u00e0tiques. Aqu\u00ed tens alguns exemples:</p> <ul> <li><code>Math.sqrt(x)</code>: Retorna la arrel quadrada d'un nombre.</li> </ul> <pre><code>const arrelQuadrada = Math.sqrt(25);\nconsole.log(arrelQuadrada); // Mostra 5\n</code></pre> <ul> <li><code>Math.random()</code>: Retorna un nombre aleatori entre 0 (inclusive) i 1 (excloent).</li> </ul> <pre><code>const nombreAleatori = Math.random();\nconsole.log(nombreAleatori); // Mostra un nombre aleatori entre 0 i 1\n</code></pre> <ul> <li><code>Math.PI</code>: Retorna el valor de \u03c0 (pi).</li> </ul> <pre><code>const pi = Math.PI;\nconsole.log(pi); // Mostra el valor de \u03c0\n</code></pre> <ul> <li><code>Math.abs(x)</code>: Retorna el valor absolut (nombre positiu) d'un nombre <code>x</code>.</li> </ul> <pre><code>const valorAbsolut = Math.abs(-10);\nconsole.log(valorAbsolut); // Mostra 10\n</code></pre> <ul> <li><code>Math.ceil(x)</code>: Arrodoneix un nombre <code>x</code> cap amunt al nombre enter m\u00e9s proper o igual.</li> </ul> <pre><code>const ceil = Math.ceil(4.2);\nconsole.log(ceil); // Mostra 5\n</code></pre> <ul> <li><code>Math.floor(x)</code>: Arrodoneix un nombre <code>x</code> cap avall al nombre enter m\u00e9s proper o igual.</li> </ul> <pre><code>const floor = Math.floor(4.9);\nconsole.log(floor); // Mostra 4\n</code></pre> <ul> <li><code>Math.round(x)</code>: Arrodoneix un nombre <code>x</code> al nombre enter m\u00e9s proper, arrodonint cap amunt o cap avall segons sigui m\u00e9s proper.</li> </ul> <pre><code>const roundUp = Math.round(4.7);\nconst roundDown = Math.round(4.2);\nconsole.log(roundUp); // Mostra 5\nconsole.log(roundDown); // Mostra 4\n</code></pre> <ul> <li><code>Math.min(x1, x2, ..., xn)</code>: Retorna el valor m\u00ednim d'una llista d'arguments.</li> </ul> <pre><code>const minim = Math.min(10, 5, 20, 30);\nconsole.log(minim); // Mostra 5\n</code></pre> <ul> <li><code>Math.max(x1, x2, ..., xn)</code>: Retorna el valor m\u00e0xim d'una llista d'arguments.</li> </ul> <pre><code>const maxim = Math.max(10, 5, 20, 30);\nconsole.log(maxim); // Mostra 30\n</code></pre> <p>Recursos per a l'Objecte Math</p> <p>A continuaci\u00f3 tens enlla\u00e7os als recursos relacionats amb l'objecte <code>Math</code> en JavaScript:</p> <ol> <li> <p>MDN Web Docs - Math</p> </li> <li> <p>W3Schools - JavaScript Math Reference</p> </li> <li> <p>ECMAScript Language Specification - Math Object</p> </li> <li> <p>JavaScript.Info - Math</p> </li> </ol>"},{"location":"UF1/UF1.3/UF1.3.5_RegExp/","title":"RegExp","text":"<p>L'objecte <code>RegExp</code>, o objecte Expressi\u00f3 Regular, \u00e9s una part important de JavaScript que s'utilitza per a les expressions regulars. Les expressions regulars s\u00f3n patrons que s'utilitzen per buscar i manipular text d'acord amb certes regles.</p> <p>Creaci\u00f3 d'un Objecte <code>RegExp</code></p> <p>Pots crear un objecte <code>RegExp</code> a JavaScript mitjan\u00e7ant una expressi\u00f3 regular literal o mitjan\u00e7ant el constructor <code>RegExp()</code>.</p> <ol> <li> <p>Utilitzant una Expressi\u00f3 Regular Literal:</p> <pre><code>const expressioRegular = /patro/; // Crea un objecte RegExp amb la expressi\u00f3 regular\n</code></pre> </li> <li> <p>Utilitzant el Constructor <code>RegExp()</code>:</p> <pre><code>const expressioRegular = new RegExp('patro'); // Crea un objecte RegExp amb el constructor\n</code></pre> </li> </ol> <p>M\u00e8todes Importants de l'Objecte RegExp</p> <p>L'objecte <code>RegExp</code> proporciona diversos m\u00e8todes per a treballar amb expressions regulars. Aqu\u00ed tens alguns exemples:</p> <ul> <li><code>test()</code>: Verifica si una cadena compleix amb un patr\u00f3 i retorna <code>true</code> o <code>false</code>.</li> </ul> <pre><code>const patro = /hola/;\nconst cadena = 'Hola, m\u00f3n!';\nconst resultat = patro.test(cadena);\nconsole.log(resultat); // Mostra true\n</code></pre> <ul> <li><code>exec()</code>: Busca una cadena per un patr\u00f3 i retorna una array amb la primera coincid\u00e8ncia trobada.</li> </ul> <pre><code>const patro = /hola/;\nconst cadena = 'Hola, m\u00f3n! Hola, univers!';\nconst resultat = patro.exec(cadena);\nconsole.log(resultat); // Mostra [\"hola\", index: 0, input: \"Hola, m\u00f3n! Hola, univers!\", groups: undefined]\n</code></pre> <ul> <li><code>match()</code>: Busca totes les coincid\u00e8ncies d'un patr\u00f3 en una cadena i les retorna com una array.</li> </ul> <pre><code>const patro = /hola/g;\nconst cadena = 'Hola, m\u00f3n! Hola, univers!';\nconst resultat = cadena.match(patro);\nconsole.log(resultat); // Mostra [\"hola\", \"hola\"]\n</code></pre> <p>Recursos per a l'Objecte RegExp</p> <ol> <li> <p>MDN Web Docs - RegExp</p> </li> <li> <p>W3Schools - JavaScript RegExp Reference</p> </li> <li> <p>ECMAScript Language Specification - RegExp Object</p> </li> </ol>"},{"location":"UF1/UF1.3/UF1.3.6_JSON/","title":"JSON","text":"<p>JSON, que significa \"JavaScript Object Notation\", \u00e9s un format lleuger d'intercanvi de dades que es fa servir per emmagatzemar i intercanviar dades estructurades. A JavaScript, JSON es fa servir per representar objectes i col\u00b7leccions de dades en una forma llestament llegible i f\u00e0cil d'entendre.</p> <p>Creaci\u00f3 i An\u00e0lisi de JSON</p> <p>Pots crear i analitzar JSON a JavaScript mitjan\u00e7ant dos m\u00e8todes importants:</p> <ol> <li><code>JSON.stringify()</code>: Aquest m\u00e8tode pren un objecte JavaScript i el converteix en una cadena JSON.</li> </ol> <pre><code>const persona = {\n  nom: 'Anna',\n  edat: 30,\n};\n\nconst jsonPersona = JSON.stringify(persona);\nconsole.log(jsonPersona); // Mostra '{\"nom\":\"Anna\",\"edat\":30}'\n</code></pre> <ol> <li><code>JSON.parse()</code>: Aquest m\u00e8tode pren una cadena JSON i la converteix en un objecte JavaScript.</li> </ol> <pre><code>const jsonPersona = '{\"nom\":\"Anna\",\"edat\":30}';\nconst persona = JSON.parse(jsonPersona);\nconsole.log(persona); // Mostra { nom: 'Anna', edat: 30 }\n</code></pre> <p>Recursos per a JSON</p> <ol> <li>MDN Web Docs - JSON</li> <li>W3Schools - JSON Introductionclara a JSON amb exemples pr\u00e0ctics.</li> <li>ECMAScript Language Specification - JSON Object</li> </ol>"},{"location":"UF1/UF1.3/UF1.3.7_Browser_Objects/","title":"Interacci\u00f3 amb el Navegador en JavaScript","text":"<p>Tot i que estan relacionats, hem de recon\u00e8ixer la difer\u00e8ncia entre el Navegador (Browser) i el DOM (Document Object Model).</p> <ul> <li> <p>DOM (Model d'Objecte del Document): \u00c9s una interf\u00edcie de programaci\u00f3 que representa la estructura d'un document web (com ara una p\u00e0gina HTML) com una estructura d'arbre. Els programadors poden utilitzar JavaScript per accedir i modificar aquesta estructura per canviar el contingut i la interacci\u00f3 de la p\u00e0gina web.</p> </li> <li> <p>Navegador: \u00c9s l'aplicaci\u00f3 de programari que els usuaris utilitzen per visualitzar i interactuar amb p\u00e0gines web. A trav\u00e9s de JS podem utilitzar alguns objectes per interactuar amb ell proporcionant informaci\u00f3 sobre el navegador, la pantalla i les finestres del navegador...</p> </li> </ul> <p>M\u00e9s endavant aprofundirem en les accions sobre el DOM que ens permeten interactuar sobretot amb les continguts del web. Vegem ara de quina manera alguns objectes ens permeten interactuar sobretot amb els nostre navegador:</p>"},{"location":"UF1/UF1.3/UF1.3.7_Browser_Objects/#lobjecte-navigator","title":"L'Objecte <code>Navigator</code>","text":"<p>L'objecte <code>Navigator</code> cont\u00e9 informaci\u00f3 sobre el navegador i la plataforma on s'est\u00e0 executant el codi JavaScript. Aix\u00f2 \u00e9s \u00fatil per identificar el tipus de navegador i el sistema operatiu, encara que \u00e9s important destacar que l'usuari pot modificar aquesta informaci\u00f3, i, per tant, no sempre \u00e9s 100% fiable.</p>"},{"location":"UF1/UF1.3/UF1.3.7_Browser_Objects/#propietats-de-lobjecte-navigator","title":"Propietats de l'Objecte <code>Navigator</code>","text":"<ul> <li><code>navigator.platform</code>: Retorna el sistema operatiu. Exemple: Win32.</li> <li><code>navigator.userAgent</code>: Retorna l'agent d'usuari que indica el navegador i la versi\u00f3. Exemple: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36.</li> <li><code>navigator.javaEnabled()</code>: Retorna si Java est\u00e0 habilitat al navegador. Exemple: false.</li> </ul> <p>Exemple: Identificaci\u00f3 del Navegador</p> <pre><code>const sistemaOperatiu = navigator.platform;\nconst agentUsuari = navigator.userAgent;\nconst javaHabilitat = navigator.javaEnabled();\n\nconsole.log(\"Sistema Operatiu:\", sistemaOperatiu);\nconsole.log(\"Agent d'Usuari:\", agentUsuari);\nconsole.log(\"Java Habilitat?\", javaHabilitat);\n</code></pre> <p>Per obtenir m\u00e9s informaci\u00f3 sobre l'objecte <code>Navigator</code>, podeu consultar la refer\u00e8ncia a MDN.</p>"},{"location":"UF1/UF1.3/UF1.3.7_Browser_Objects/#lobjecte-screen","title":"L'Objecte <code>Screen</code>","text":"<p>L'objecte <code>Screen</code> proporciona informaci\u00f3 sobre la pantalla del dispositiu de l'usuari, incloent-hi l'amplada, l'al\u00e7ada i la profunditat de color.</p>"},{"location":"UF1/UF1.3/UF1.3.7_Browser_Objects/#propietats-de-lobjecte-screen","title":"Propietats de l'Objecte <code>Screen</code>","text":"<ul> <li><code>screen.width</code>: Retorna l'amplada de la pantalla en p\u00edxels. Exemple: 1920.</li> <li><code>screen.height</code>: Retorna l'al\u00e7ada de la pantalla en p\u00edxels. Exemple: 1080.</li> <li><code>screen.colorDepth</code>: Retorna la profunditat de color en bits. Exemple: 24 bits.</li> </ul> <p>Exemple: Obtenir Informaci\u00f3 de la Pantalla</p> <pre><code>const amplePantalla = screen.width;\nconst alcadaPantalla = screen.height;\nconst profunditatColor = screen.colorDepth;\n\nconsole.log(\"Amplada de la Pantalla:\", amplePantalla);\nconsole.log(\"Al\u00e7ada de la Pantalla:\", alcadaPantalla);\nconsole.log(\"Profunditat de Color:\", profunditatColor);\n</code></pre> <p>Per a m\u00e9s detalls sobre l'objecte <code>Screen</code>, podeu consultar la refer\u00e8ncia a MDN.</p>"},{"location":"UF1/UF1.3/UF1.3.7_Browser_Objects/#lobjecte-window","title":"L'Objecte <code>Window</code>","text":"<p>L'objecte <code>Window</code> representa cada finestra oberta del navegador i permet gestionar finestres, frames i esdeveniments de temporitzaci\u00f3.</p>"},{"location":"UF1/UF1.3/UF1.3.7_Browser_Objects/#operacions-amb-finestres","title":"Operacions amb Finestres","text":"<p>Operacions B\u00e0siques amb Finestres</p> <p>Obrir una Finestra Emergent (Pop-up): Pots utilitzar el m\u00e8tode <code>window.open()</code> per obrir una finestra emergent. Aquesta funci\u00f3 pot prendre diversos par\u00e0metres com la URL que es mostrar\u00e0 a la finestra emergent, el nom de la finestra, les dimensions, i molts altres. Exemple:</p> <pre><code>const novaFinestra = window.open(\n  \"https://www.exemple.com\",\n  \"NomDeLaFinestra\",\n  \"width=500,height=300\"\n);\n</code></pre> <p>Tancar una Finestra: Pots tancar una finestra utilitzant el m\u00e8tode <code>window.close()</code>. Aquest m\u00e8tode nom\u00e9s pot tancar finestres que han estat obertes mitjan\u00e7ant JavaScript i nom\u00e9s si s'ha obert des de la mateixa p\u00e0gina web que l'est\u00e0 tancant. Exemple:</p> <pre><code>novaFinestra.close();\n</code></pre> <p>Operacions amb la Finestra Actual</p> <ul> <li>Redirigir la Finestra Actual: Pots canviar la URL de la finestra actual mitjan\u00e7ant <code>window.location</code>. Aix\u00f2 redirigir\u00e0 l'usuari a una nova p\u00e0gina web. Exemple:</li> </ul> <pre><code>window.location.href = \"https://www.novaweb.com\";\n</code></pre> <ul> <li>Recarregar la P\u00e0gina: Utilitza <code>window.location.reload()</code> per recarregar la p\u00e0gina actual. Exemple:</li> </ul> <pre><code>window.location.reload();\n</code></pre> <p>Operacions de Mida i Posici\u00f3</p> <ul> <li>Canviar la Mida de la Finestra: Utilitza <code>window.resizeTo()</code> per canviar la mida de la finestra actual. Exemple:</li> </ul> <pre><code>window.resizeTo(800, 600); // Canvia les dimensions de la finestra a 800x600 p\u00edxels\n</code></pre> <ul> <li>Moure la Finestra: Pots utilitzar <code>window.moveTo()</code> per moure la finestra a una nova posici\u00f3. Exemple:</li> </ul> <pre><code>window.moveTo(100, 200); // Mou la finestra a la posici\u00f3 (100, 200) p\u00edxels respecte a la vora superior esquerra de la pantalla.\n</code></pre> <p>Aquestes s\u00f3n algunes de les operacions b\u00e0siques que pots realitzar amb les finestres en JavaScript. Les finestres s\u00f3n importants per al control de la interf\u00edcie del navegador i per a l'interacci\u00f3 amb les p\u00e0gines web i altres recursos. Utilitzant les operacions adeq\u00fcades, pots millorar l'experi\u00e8ncia de l'usuari i gestionar les finestres emergents o els frames dins de la teva aplicaci\u00f3 web.</p> <p>Per a m\u00e9s detalls sobre l'objecte <code>Window</code>, podeu consultar la refer\u00e8ncia a W3Schools.</p>"},{"location":"UF1/UF1.3/UF1.3.7_Browser_Objects/#lobjecte-document","title":"L'Objecte <code>Document</code>","text":"<p>L'objecte <code>Document</code> representa tot el contingut del document HTML actual i permet manipular elements i contingut del document.</p>"},{"location":"UF1/UF1.3/UF1.3.7_Browser_Objects/#seleccio-delements-html","title":"Selecci\u00f3 d'Elements HTML","text":"<p>Podeu seleccionar elements HTML pel seu id, classe o etiqueta.</p> <p>Exemple: Selecci\u00f3 d'un Element per ID</p> <pre><code>const element = document.getElementById(\"id-de-l-element\");\n</code></pre> <p>Exemple: Selecci\u00f3 d'Elements per Classe</p> <pre><code>const elements = document.getElementsByClassName(\"nom-de-classe\");\n</code></pre> <p>Exemple: Selecci\u00f3 d'Elements per Etiqueta</p> <pre><code>const paragrafs = document.getElementsByTagName(\"p\");\n</code></pre> <p>Per descomptat, aqu\u00ed tens la informaci\u00f3 sobre els objectes <code>History</code> i <code>Location</code>:</p>"},{"location":"UF1/UF1.3/UF1.3.7_Browser_Objects/#lobjecte-history","title":"L'Objecte <code>History</code>","text":"<p>L'objecte <code>History</code> en JavaScript cont\u00e9 l'historial de navegaci\u00f3 per a la finestra o pestanya activa. Aix\u00f2 permet navegar enrere i endavant a trav\u00e9s de les p\u00e0gines visitades, tot i que no es pot accedir a les URLs individuals per motius de seguretat i privacitat.</p> <p>A continuaci\u00f3, es mostren algunes propietats i m\u00e8todes importants de l'objecte <code>History</code>:</p> <ul> <li><code>length</code>: Retorna el nombre d'elements a l'historial de navegaci\u00f3.</li> </ul> <pre><code>const longitudHistorial = history.length;\nconsole.log(longitudHistorial); // Mostra el nombre d'elements a l'historial\n</code></pre> <ul> <li><code>back()</code>: Navega a la p\u00e0gina anterior de l'historial.</li> </ul> <pre><code>history.back();\n</code></pre> <ul> <li><code>forward()</code>: Navega a la p\u00e0gina seg\u00fcent de l'historial.</li> </ul> <pre><code>history.forward();\n</code></pre> <ul> <li><code>go(delta)</code>: Navega un nombre determinat de p\u00e0gines enrere o endavant a l'historial.</li> </ul> <pre><code>history.go(-2); // Navega 2 p\u00e0gines enrere\n</code></pre>"},{"location":"UF1/UF1.3/UF1.3.7_Browser_Objects/#lobjecte-location","title":"L'Objecte <code>Location</code>","text":"<p>L'objecte <code>Location</code> cont\u00e9 informaci\u00f3 sobre la URL actual del navegador i permet accedir a diferents parts de la URL, com ara el protocol, el domini i la ruta. Tamb\u00e9 ofereix m\u00e8todes per a carregar noves p\u00e0gines o recarregar la p\u00e0gina actual.</p> <p>A continuaci\u00f3, es mostren algunes propietats i m\u00e8todes importants de l'objecte <code>Location</code>:</p> <ul> <li><code>href</code>: Retorna la URL completa de la p\u00e0gina actual.</li> </ul> <pre><code>const urlActual = location.href;\nconsole.log(urlActual); // Mostra la URL completa de la p\u00e0gina actual\n</code></pre> <ul> <li><code>reload()</code>: Recarrega la p\u00e0gina actual.</li> </ul> <pre><code>location.reload();\n</code></pre> <ul> <li><code>assign(url)</code>: Carrega una nova URL especificada.</li> </ul> <pre><code>location.assign(\"https://www.example.com\"); // Carrega una nova URL\n</code></pre> <ul> <li><code>replace(url)</code>: Carrega una nova URL i substitueix l'actual a l'historial de navegaci\u00f3.</li> </ul> <pre><code>location.replace(\"https://www.example.com\"); // Carrega una nova URL i la substitueix a l'historial\n</code></pre> <p>Aquests s\u00f3n alguns dels m\u00e8todes i propietats m\u00e9s comuns que pots utilitzar amb els objectes <code>History</code> i <code>Location</code> per gestionar l'historial de navegaci\u00f3 i controlar la URL actual en una aplicaci\u00f3 web.</p> <p>Per a m\u00e9s detalls sobre l'objecte <code>Document</code>, podeu consultar la refer\u00e8ncia a W3Schools.</p>"},{"location":"UF1/UF1.3/UF1.3_Objectes_predefinits/","title":"Identificaci\u00f3 i aplicaci\u00f3 dels objectes predefinits del llenguatge","text":"<p>JavaScript t\u00e9 diversos objectes pr\u00f2pics (objectes incorporats) que formen part del llenguatge i proporcionen funcionalitats essencials per desenvolupar aplicacions web i altres aplicacions. Aqu\u00ed teniu alguns dels principals objectes pr\u00f2pics de JavaScript:</p> <ul> <li> <p>Object: \u00c9s l'objecte arrel a partir del qual tots els altres objectes hereten propietats i m\u00e8todes. \u00c9s \u00e0mpliament utilitzat per crear i manipular objectes personalitzats.</p> </li> <li> <p>Array: S'utilitza per emmagatzemar i manipular col\u00b7leccions d'elements ordenats. Proporciona una s\u00e8rie de m\u00e8todes \u00fatils per a la manipulaci\u00f3 de dades, com ara <code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>map</code>, <code>filter</code>, i molts m\u00e9s.</p> </li> <li> <p>String: \u00c9s utilitzat per treballar amb cadenes de car\u00e0cters. Proporciona una s\u00e8rie de m\u00e8todes per a la manipulaci\u00f3 de cadenes, com ara <code>split</code>, <code>substring</code>, <code>toUpperCase</code>, <code>toLowerCase</code>, entre d'altres.</p> </li> <li> <p>Number: Proporciona m\u00e8todes i propietats per a treballar amb valors num\u00e8rics, com ara <code>toFixed</code>, <code>parseInt</code>, <code>parseFloat</code>, i altres.</p> </li> <li> <p>Boolean: L'objecte Boolean es fa servir per treballar amb valors booleans (true o false).</p> </li> <li> <p>Date: S'utilitza per a la gesti\u00f3 de dates i hores, permetent crear i manipular dates, calcular intervals de temps i m\u00e9s.</p> </li> <li> <p>Math: L'objecte Math proporciona una gran quantitat de m\u00e8todes i constants per a operacions matem\u00e0tiques complexes, com ara <code>Math.sqrt</code>, <code>Math.random</code>, <code>Math.PI</code>, i altres.</p> </li> <li> <p>RegExp: L'objecte RegExp s'utilitza per a les expressions regulars, que s\u00f3n patrons que s'utilitzen per buscar i manipular text d'acord amb certes regles.</p> </li> <li> <p>Function: Les funcions en JavaScript s\u00f3n objectes funci\u00f3, i aix\u00ed poden ser manipulades com a qualsevol altre objecte. Podeu assignar funcions com a propietats d'altres objectes i fins i tot passar-les com a arguments a altres funcions.</p> </li> <li> <p>JSON: Encara que no sigui estrictament un objecte incorporat, JSON (JavaScript Object Notation) \u00e9s una notaci\u00f3 que es fa servir \u00e0mpliament per a la serialitzaci\u00f3 i el transport de dades. JavaScript proporciona les funcions <code>JSON.parse()</code> i <code>JSON.stringify()</code> per a la conversi\u00f3 entre objectes JavaScript i cadenes JSON.</p> </li> </ul>"},{"location":"UF2/UF2.1/UF2.1.1_Funcions/","title":"Funcions en JavaScript","text":"<p>Les funcions s\u00f3n un component fonamental de JavaScript que permeten encapsular i reutilitzar blocs de codi. A continuaci\u00f3, explorarem diferents aspectes de les funcions en JavaScript.</p>"},{"location":"UF2/UF2.1/UF2.1.1_Funcions/#declaracio-de-funcions","title":"Declaraci\u00f3 de Funcions","text":"<p>En JavaScript, les funcions es poden declarar de diverses maneres. Primerament, tenim la declaraci\u00f3 de funcions tradicional, que utilitza la paraula clau <code>function</code>. Aquesta \u00e9s una forma comuna de declarar funcions i est\u00e0 disponible en totes les versions de JavaScript:</p> <pre><code>function suma(a, b) {\n  return a + b;\n}\n</code></pre> <p>Un altre m\u00e8tode de declarar funcions \u00e9s utilitzar expressions de funci\u00f3. Aquest enfocament permet assignar una funci\u00f3 a una variable. Aqu\u00ed tenim un exemple:</p> <pre><code>const resta = function (a, b) {\n  return a - b;\n};\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.1_Funcions/#funcions-arrow-ecmascript-6","title":"Funcions Arrow (ECMAScript 6)","text":"<p>A partir d'ECMAScript 6 (ES6), es va introduir una nova sintaxi coneguda com a \"funcions arrow\" o \"arrow functions.\" Aquest tipus de funcions ofereix una sintaxi m\u00e9s concisa i \u00e9s especialment \u00fatil quan es treballa amb funcions petites i an\u00f2nimes. Les funcions arrow es defineixen utilitzant la sintaxi <code>() =&gt; {}</code>. Aqu\u00ed tens exemples de com es poden utilitzar les funcions arrow:</p> <pre><code>const multiplicacio = (a, b) =&gt; a * b;\n\nconst saluda = (nom) =&gt; {\n  return `Hola, ${nom}!`;\n};\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.1_Funcions/#funcions-anonimes","title":"Funcions An\u00f2nimes","text":"<p>Una funci\u00f3 an\u00f2nima \u00e9s una funci\u00f3 que no t\u00e9 un nom espec\u00edfic. S'utilitzen sovint com a arguments per a altres funcions o es poden assignar a variables. Aqu\u00ed tens un exemple de funci\u00f3 an\u00f2nima:</p> <pre><code>const saludador = function (nom) {\n  return `Hola, ${nom}!`;\n};\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.1_Funcions/#funcions-com-arguments-i-parametres","title":"Funcions com Arguments i Par\u00e0metres","text":"<p>Les funcions poden rebre arguments, que s\u00f3n valors que es passen a la funci\u00f3 quan es crida. Aquests arguments s\u00f3n com les entrades de la funci\u00f3 i es poden utilitzar dins del cos de la funci\u00f3. Aqu\u00ed tens un exemple:</p> <pre><code>function saluda(nom) {\n  console.log(`Hola, ${nom}!`);\n}\n\nsaluda('Anna'); // \"Hola, Anna!\"\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.1_Funcions/#retorn-de-valors","title":"Retorn de Valors","text":"<p>Les funcions poden retornar valors mitjan\u00e7ant la paraula clau <code>return</code>. Aquest valor \u00e9s el resultat de l'execuci\u00f3 de la funci\u00f3 i es pot utilitzar en altres parts del codi. Exemple:</p> <pre><code>function multiplica(a, b) {\n  return a * b;\n}\n\nconst resultat = multiplica(3, 4);\nconsole.log(resultat); // 12\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.1_Funcions/#funcions-com-expressions","title":"Funcions com Expressions","text":"<p>Les funcions tamb\u00e9 es poden utilitzar com a expressions i assignar-les a variables. Aix\u00f2 \u00e9s \u00fatil quan volem passar funcions com a arguments a altres funcions o tenir funcions emmagatzemades com a dades. Exemple:</p> <pre><code>const suma = function (a, b) {\n  return a + b;\n};\n\nconst resultat = suma(5, 7);\nconsole.log(resultat); // 12\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.1_Funcions/#funcions-com-objectes","title":"Funcions com Objectes","text":"<p>En JavaScript, les funcions tamb\u00e9 s\u00f3n objectes. Aix\u00f2 significa que poden tenir propietats i m\u00e8todes com qualsevol altre objecte. Aqu\u00ed tens un exemple d'afegir una propietat a una funci\u00f3:</p> <pre><code>function diHola() {\n  console.log('Hola!');\n}\n\ndiHola.idioma = 'espanyol';\nconsole.log(diHola.idioma); // \"espanyol\"\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.1_Funcions/#funcions-anonimes-autoinvocades","title":"Funcions An\u00f2nimes Autoinvocades","text":"<p>Les funcions an\u00f2nimes autoinvocades s\u00f3n funcions que es declaren i s'executen immediatament despr\u00e9s. Aquestes funcions s\u00f3n \u00fatils per encapsular blocs de codi i evitar la contaminaci\u00f3 de l'espai global. Exemple:</p> <pre><code>(function () {\n  const missatge = 'Aix\u00f2 \u00e9s una funci\u00f3 an\u00f2nima autoinvocada';\n  console.log(missatge);\n})();\n</code></pre> <p>En resum, les funcions s\u00f3n un element central en JavaScript que permeten la reutilitzaci\u00f3 de codi, l'organitzaci\u00f3 del programa i la creaci\u00f3 de funcions an\u00f2nimes i autoinvocades. \u00c9s important comprendre les diferents formes de declarar i utilitzar funcions, ja que s\u00f3n fonamentals per a la programaci\u00f3 en JavaScript.</p>"},{"location":"UF2/UF2.1/UF2.1.2_Objectes/","title":"Objectes en JavaScript","text":"<p>Els objectes s\u00f3n una part fonamental de JavaScript que permeten emmagatzemar dades en forma de parelles clau-valor. A continuaci\u00f3, explorarem com treballar amb objectes i les seves caracter\u00edstiques.</p>"},{"location":"UF2/UF2.1/UF2.1.2_Objectes/#introduccio-als-objectes","title":"Introducci\u00f3 als Objectes","text":"<p>Els objectes s\u00f3n estructures de dades clau-valor en JavaScript que permeten emmagatzemar informaci\u00f3 relacionada. Aqu\u00ed tens alguns conceptes fonamentals:</p> <ul> <li>Parelles Clau-Valor: Les propietats d'un objecte es defineixen com parelles clau-valor, on cada clau (o propietat) est\u00e0 associada amb un valor.</li> <li>Notaci\u00f3 d'Objecte: Pots crear objectes utilitzant la notaci\u00f3 d'objecte, que implica l'\u00fas de les claus <code>{}</code> i separar les propietats amb comes.</li> </ul> <p>Exemple d'objecte simple:</p> <pre><code>const persona = {\n  nom: 'John',\n  edat: 30,\n  casat: false,\n};\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.2_Objectes/#accedir-a-les-propietats","title":"Accedir a les Propietats","text":"<p>Per accedir a les propietats d'un objecte, pots utilitzar dues formes principals:</p>"},{"location":"UF2/UF2.1/UF2.1.2_Objectes/#notacio-de-punt","title":"Notaci\u00f3 de Punt","text":"<p>Utilitza la notaci\u00f3 de punt (<code>object.propietat</code>) per accedir a una propietat espec\u00edfica d'un objecte.</p> <p>Exemple:</p> <pre><code>console.log(persona.nom); // \"John\"\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.2_Objectes/#notacio-de-corxetes","title":"Notaci\u00f3 de Corxetes","text":"<p>Pots utilitzar la notaci\u00f3 de corxetes (<code>object['propietat']</code>) per accedir a les propietats quan la clau \u00e9s una variable o cont\u00e9 car\u00e0cters especials.</p> <p>Exemple:</p> <pre><code>const clau = 'edat';\nconsole.log(persona[clau]); // 30\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.2_Objectes/#objectes-anidats","title":"Objectes Anidats","text":"<p>Els objectes poden contenir altres objectes, creant una estructura anidada. Aix\u00f2 permet organitzar les dades de manera jer\u00e0rquica.</p> <p>Exemple d'objecte anidat:</p> <pre><code>const cotxe = {\n  marca: 'Toyota',\n  model: 'Corolla',\n  motor: {\n    cilindres: 4,\n    potencia: '120CV',\n  },\n};\n</code></pre> <p>Per accedir a les propietats anidades, utilitza la notaci\u00f3 de punt o corxetes com abans.</p>"},{"location":"UF2/UF2.1/UF2.1.2_Objectes/#crear-propietats-dinamiques","title":"Crear Propietats Din\u00e0miques","text":"<p>JavaScript permet afegir noves propietats als objectes despr\u00e9s de la seva creaci\u00f3 i canviar els seus valors.</p> <p>Exemple d'afegir una nova propietat:</p> <pre><code>persona.professio = 'Enginyer';\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.2_Objectes/#eliminar-propietats","title":"Eliminar Propietats","text":"<p>Pots eliminar propietats d'un objecte utilitzant l'operador <code>delete</code>.</p> <p>Exemple:</p> <pre><code>delete persona.casat;\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.2_Objectes/#iterar-sobre-propietats","title":"Iterar sobre Propietats","text":"<p>Per iterar sobre les propietats d'un objecte, pots utilitzar el bucle <code>for...in</code>.</p> <p>Exemple d'iteraci\u00f3:</p> <pre><code>for (let clau in persona) {\n  console.log(clau + ': ' + persona[clau]);\n}\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.2_Objectes/#objectes-mutables","title":"Objectes Mutables","text":"<p>Els objectes en JavaScript s\u00f3n mutables, el que significa que el seu contingut pot canviar, fins i tot si es declaren com a constants utilitzant <code>const</code>. La refer\u00e8ncia a l'objecte \u00e9s la que no es pot canviar.</p> <p>Aix\u00ed doncs, en el cas d'un objecte declarat com a constant amb <code>const</code>, no podem fer el seg\u00fcent:</p> <pre><code>const persona = {\n  nom: 'Maria',\n  edat: 30,\n};\n\n// Aix\u00f2 no es permet amb una constant\npersona = {}; // Error: Assignment to constant variable.\n</code></pre> <p>Per\u00f2, encara podem fer el seg\u00fcent sense problemes:</p> <pre><code>const persona = {\n  nom: 'Maria',\n  edat: 30,\n};\n\n// Podem modificar les propietats de l'objecte\npersona.nom = 'Lluisa';\npersona.edat = 35;\n\nconsole.log(persona); // { nom: 'Lluisa', edat: 35 }\n</code></pre> <p>En aquest cas, no estem canviant l'objecte en si mateix (<code>persona</code> segueix apuntant al mateix objecte), sin\u00f3 que estem modificant les propietats de l'objecte, la qual cosa \u00e9s totalment v\u00e0lida amb una constant.</p>"},{"location":"UF2/UF2.1/UF2.1.2_Objectes/#getter-i-setter","title":"Getter i Setter","text":"<p>Utilitat de Getters i Setters</p> <p>Els getters i setters s\u00f3n m\u00e8todes especials que es poden definir en un objecte JavaScript per controlar l'acc\u00e9s i la modificaci\u00f3 de les seves propietats. Aqu\u00ed teniu algunes raons per les quals s\u00f3n \u00fatils:</p> <p>Control de l'acc\u00e9s: Els getters i setters permeten imposar restriccions i validacions en l'acc\u00e9s i la modificaci\u00f3 de les propietats.</p> <p>Encapsulaci\u00f3: Faciliten la encapsulaci\u00f3 de les dades, ocultant els detalls interns de com es magatzemen les propietats.</p> <p>Validaci\u00f3 de Dades: Amb els setters, podeu validar les dades abans d'assignar-les a una propietat.</p> <p>Compatibilitat amb Versions Anteriors: Manteniu la compatibilitat amb codi existent mitjan\u00e7ant getters i setters, fins i tot si canvieu la implementaci\u00f3 interna.</p> <p>Evitar Efectes Secundaris: Poden ajudar a evitar efectes secundaris no desitjats quan es canvia una propietat.</p> <p>Getter: Un getter \u00e9s un m\u00e8tode que s'utilitza per obtenir el valor d'una propietat d'un objecte.</p> <p>Setter: Un setter \u00e9s un m\u00e8tode que s'utilitza per assignar un valor a una propietat d'un objecte.</p> <p>Exemple:</p> <pre><code>const persona = {\n  _edat: 0, // Nota: Per convenci\u00f3, les propietats privades es comencen amb un guion baix (_).\n\n  // Getter per obtenir l'edat\n  get edat() {\n    return this._edat;\n  },\n\n  // Setter per assignar una nova edat amb validaci\u00f3\n  set edat(novaEdat) {\n    if (novaEdat &gt;= 0 &amp;&amp; novaEdat &lt;= 120) {\n      this._edat = novaEdat;\n    } else {\n      console.error('Edat no v\u00e0lida');\n    }\n  },\n};\n\n// Utilitzant el setter per assignar una edat v\u00e0lida\npersona.edat = 25;\n\n// Utilitzant el getter per obtenir l'edat\nconsole.log(persona.edat); // Resultat: 25\n\n// Intentant assignar una edat no v\u00e0lida\npersona.edat = 150; // Aix\u00f2 generaria un missatge d'error\n\n// Accedint a la propietat _edat directament (no recomanat, ja que evitem la validaci\u00f3)\nconsole.log(persona._edat); // Resultat: 25\n</code></pre> <p>En aquest exemple, el getter <code>edat</code> ens permet obtenir el valor de la propietat <code>_edat</code>, mentre que el setter <code>edat</code> ens permet assignar un valor a aquesta propietat amb validaci\u00f3. Aix\u00f2 ens permet controlar i validar l'acc\u00e9s i la modificaci\u00f3 de la propietat <code>edat</code>.</p>"},{"location":"UF2/UF2.1/UF2.1.2_Objectes/#objectes-com-a-arguments-de-funcions","title":"Objectes com a Arguments de Funcions","text":"<p>Quan un objecte es passa com a argument a una funci\u00f3 a JavaScript, aquest objecte es passa per refer\u00e8ncia, no per valor. Aix\u00f2 significa que, en realitat, s'est\u00e0 passant una refer\u00e8ncia a l'objecte original, no una c\u00f2pia de l'objecte.</p> <pre><code>// Definim un objecte\nconst cotxe = {\n  marca: 'Toyota',\n  model: 'Corolla',\n};\n\n// Funci\u00f3 que modifica l'objecte rebut com a argument\nfunction canviarMarca(coche) {\n  coche.marca = 'Honda';\n}\n\nconsole.log(cotxe.marca); // Abans de cridar la funci\u00f3: \"Toyota\"\n\n// Cridem la funci\u00f3 i passem l'objecte cotxe com a argument\ncanviarMarca(cotxe);\n\nconsole.log(cotxe.marca); // Despr\u00e9s de cridar la funci\u00f3: \"Honda\"\n</code></pre> <p>S'ha de tenir cura quan passeu objectes com a arguments, ja que les modificacions poden afectar l'objecte original. Si voleu evitar aquest comportament i treballar amb una c\u00f2pia de l'objecte, podeu crear-ne una c\u00f2pia expl\u00edcita abans de passar-lo com a argument o dins de la funci\u00f3.</p>"},{"location":"UF2/UF2.1/UF2.1.2_Objectes/#copia-explicita","title":"C\u00f2pia expl\u00edcita","text":"<p>Podeu crear una c\u00f2pia expl\u00edcita d'un objecte a JavaScript de diverses maneres, depenent de la vostra prefer\u00e8ncia i de les eines disponibles en el vostre entorn. Aqu\u00ed teniu dues maneres comunes de fer-ho:</p> <p>1. Mitjan\u00e7ant l'operador d'objecte <code>{...}</code> (Operador de propagaci\u00f3)</p> <p>Aquesta \u00e9s una forma simple i efica\u00e7 de crear una c\u00f2pia superficial d'un objecte:</p> <pre><code>const original = { nom: 'Alice', edat: 30 };\nconst copia = { ...original };\n\nconsole.log(copia); // { nom: \"Alice\", edat: 30 }\n\n// Modificar la c\u00f2pia no afecta l'original\ncopia.nom = 'Bob';\nconsole.log(original.nom); // \"Alice\"\nconsole.log(copia.nom); // \"Bob\"\n</code></pre> <p>2. Mitjan\u00e7ant la funci\u00f3 <code>Object.assign()</code></p> <p><code>Object.assign()</code> permet combinar diverses propietats d'objectes en un objecte de dest\u00ed. Utilitzant un objecte buit com a dest\u00ed, podeu crear una c\u00f2pia d'un objecte:</p> <pre><code>const original = { nom: 'Alice', edat: 30 };\nconst copia = Object.assign({}, original);\n\nconsole.log(copia); // { nom: \"Alice\", edat: 30 }\n\n// Modificar la c\u00f2pia no afecta l'original\ncopia.nom = 'Bob';\nconsole.log(original.nom); // \"Alice\"\nconsole.log(copia.nom); // \"Bob\"\n</code></pre> <p>Les dues d'aquestes opcions us permeten crear una c\u00f2pia superficial d'un objecte, el que significa que nom\u00e9s es copiaran les propietats principals i no les propietats anidades (si n'hi ha). Si teniu objectes anidats i voleu una c\u00f2pia profunda (c\u00f2pia de tots els objectes anidats), haur\u00edeu de fer servir m\u00e8todes m\u00e9s avan\u00e7ats com <code>JSON.parse()</code> i <code>JSON.stringify()</code>, o utilitzar llibreries externes com <code>lodash</code>.</p>"},{"location":"UF2/UF2.1/UF2.1.2_Objectes/#funcions-com-a-propietats-dobjectes","title":"Funcions com a Propietats d'Objectes","text":"<p>Els objectes poden contenir funcions com a propietats, conegudes com a m\u00e8todes. Aquests m\u00e8todes poden ser invocats utilitzant la notaci\u00f3 de punt.</p> <p>Exemple de m\u00e8tode:</p> <pre><code>const cotxe = {\n  marca: 'Toyota',\n  model: 'Corolla',\n  iniciar: function () {\n    console.log(\"El cotxe s'inicia.\");\n  },\n};\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.2_Objectes/#this-en-javascript","title":"<code>this</code> en JavaScript","text":"<p>La paraula clau <code>this</code> \u00e9s una caracter\u00edstica fonamental de JavaScript que fa refer\u00e8ncia a l'objecte actual o al context en qu\u00e8 s'est\u00e0 executant el codi. El seu \u00fas i valor poden variar segons el context. Aqu\u00ed tens un resum del seu \u00fas i funcionalitat:</p> <p>Dins d'un Objecte: En els m\u00e8todes d'un objecte, <code>this</code> fa refer\u00e8ncia a l'objecte que cont\u00e9 el m\u00e8tode. S'utilitza per accedir a les propietats i m\u00e8todes d'aquest objecte.</p> <pre><code>const cotxe = {\n  marca: 'Toyota',\n  model: 'Corolla',\n\n  informacio: function () {\n    console.log(`Marca: ${this.marca}, Model: ${this.model}`);\n  },\n};\n\ncotxe.informacio(); // Marca: Toyota, Model: Corolla\n</code></pre> <p>Dins d'una Funci\u00f3 Global: En una funci\u00f3 que no \u00e9s un m\u00e8tode d'un objecte, <code>this</code> fa refer\u00e8ncia a l'objecte global (normalment <code>window</code> en un navegador) o <code>undefined</code> en mode estricte (<code>'use strict';</code>).</p> <pre><code>function mostrarThis() {\n  console.log(this); // Refer\u00e8ncia a l'objecte global (window en un navegador)\n}\n\nmostrarThis();\n</code></pre> <p>Dins d'un Constructor d'Objectes: Dins d'un constructor, <code>this</code> fa refer\u00e8ncia a l'objecte que es crea mitjan\u00e7ant el constructor. S'utilitza per assignar valors a les propietats de l'objecte.</p> <pre><code>function Persona(nom) {\n  this.nom = nom;\n}\n\nconst persona1 = new Persona('Alice');\nconsole.log(persona1.nom); // \"Alice\"\n</code></pre> <p>Dins de M\u00e8todes d'Array: En m\u00e8todes d'array com <code>forEach</code>, <code>map</code>, <code>filter</code>, <code>reduce</code>, etc., <code>this</code> fa refer\u00e8ncia a l'objecte actual de l'array.</p> <pre><code>const nombres = [1, 2, 3];\n\nnombres.forEach(function (numero) {\n  console.log(this); // Refer\u00e8ncia a l'objecte actual (nombres)\n}, nombres);\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.2_Objectes/#objectes-anonims","title":"Objectes An\u00f2nims","text":"<p>Pots crear objectes sense assignar-los a una variable. Aquests s'anomenen objectes an\u00f2nims i s\u00f3n \u00fatils per a una sola utilitzaci\u00f3.</p> <p>Exemple d'objecte an\u00f2nim:</p> <pre><code>const info = {\n  nom: 'Anna',\n  edat: 25,\n};\n</code></pre> <p>Aquest temari et proporciona una base s\u00f2lida per entendre els objectes en JavaScript i com utilitzar-los efica\u00e7ment per emmagatzemar i manipular dades.</p>"},{"location":"UF2/UF2.1/UF2.1.3_Moduls/","title":"Modules (Programaci\u00f3 modular)","text":""},{"location":"UF2/UF2.1/UF2.1.3_Moduls/#que-son-els-moduls","title":"Qu\u00e8 s\u00f3n els m\u00f2duls?","text":"<p>Els m\u00f2duls s\u00f3n peces de codi reutilitzables en un fitxer que es poden exportar i, posteriorment, importar per utilitzar-les en un altre fitxer. Un programa modular \u00e9s aquell on els seus components es poden separar, utilitzar de manera individual i recombinar per crear un sistema complex.</p> <p>Imagina un programa com el que es mostra a continuaci\u00f3, escrit en un fitxer anomenat my_app.js:</p> <p>En lloc d'escriure tot el programa dins de my_app.js, els seus components s\u00f3n dividits en m\u00f2duls separats que gestionen tasques espec\u00edfiques. Per exemple, el m\u00f2dul database_logic.js pot contenir el codi per emmagatzemar i recuperar dades d'una base de dades. Mentre que el m\u00f2dul date_formatting.js pot contenir funcions dissenyades per convertir f\u00e0cilment valors d'un format/tipus a un altre (una tasca comuna entre programadors).</p>"},{"location":"UF2/UF2.1/UF2.1.3_Moduls/#implementacions-de-moduls-a-javascript-nodejs-vs-es6","title":"Implementacions de M\u00f2duls a JavaScript: Node.js vs. ES6","text":"<p> Abans de comen\u00e7ar, cal destacar que hi ha m\u00faltiples maneres d'implementar m\u00f2duls segons l'entorn d'execuci\u00f3 en el qual el teu codi s'estigui executant. A JavaScript, hi ha dos entorns d'execuci\u00f3 principals i cadascun t\u00e9 una implementaci\u00f3 de m\u00f2duls preferida:</p> <ol> <li>L'entorn d'execuci\u00f3 de Node i la sintaxi <code>module.exports</code> i <code>require()</code>.</li> <li>L'entorn d'execuci\u00f3 del navegador i la sintaxi d'importaci\u00f3/exportaci\u00f3 ES6.</li> </ol> <p>Certament, aqu\u00ed tens l'explicaci\u00f3 anterior amb les parts de codi clarament separades i identificades:</p> <p>Qu\u00e8 s\u00f3n els m\u00f2duls? Els m\u00f2duls s\u00f3n peces de codi reutilitzables en un fitxer que es poden exportar i, posteriorment, importar per utilitzar-les en un altre fitxer. Un programa modular \u00e9s aquell on els seus components es poden separar, utilitzar de manera individual i recombinar per crear un sistema complex.</p> <pre><code>// Exemple d'un programa modular\nconst converters = require('./converters.js');\n\nconst freezingPointC = 0;\nconst boilingPointC = 100;\n\nconst freezingPointF = converters.celsiusToFahrenheit(freezingPointC);\nconst boilingPointF = converters.celsiusToFahrenheit(boilingPointC);\n\nconsole.log(\n  `El punt de congelaci\u00f3 de l'aigua en graus Fahrenheit \u00e9s ${freezingPointF}`\n);\nconsole.log(\n  `El punt d'ebullici\u00f3 de l'aigua en graus Fahrenheit \u00e9s ${boilingPointF}`\n);\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.3_Moduls/#implementant-moduls-a-node","title":"Implementant M\u00f2duls a Node","text":"<p>Cada fitxer JavaScript que s'executa en un entorn de Node es tracta com un m\u00f2dul independent. Les funcions i les dades definides dins de cada m\u00f2dul poden ser utilitzades per qualsevol altre m\u00f2dul, sempre que aquests recursos siguin exportats i importats correctament.</p> <pre><code>// Exemple de m\u00f2dul que exporta funcions\nfunction celsiusToFahrenheit(celsius) {\n  return celsius * (9 / 5) + 32;\n}\n\nmodule.exports.celsiusToFahrenheit = celsiusToFahrenheit;\n\nmodule.exports.fahrenheitToCelsius = function (fahrenheit) {\n  return (fahrenheit - 32) * (5 / 9);\n};\n</code></pre> <pre><code>// Exemple d'\u00fas de require() per importar funcions d'un m\u00f2dul\nconst { celsiusToFahrenheit } = require('./converters.js');\n\nconst celsiusInput = process.argv[2];\nconst fahrenheitValue = celsiusToFahrenheit(celsiusInput);\n\nconsole.log(\n  `${celsiusInput} graus Celsius = ${fahrenheitValue} graus Fahrenheit`\n);\n</code></pre> <p>Amb aquest enfocament modular, les funcions poden ser compartides i utilitzades en diferents parts del teu programa, evitant la duplicaci\u00f3 de codi i millorant la gesti\u00f3 de projectes.</p>"},{"location":"UF2/UF2.1/UF2.1.3_Moduls/#es6-ecmascript-2015","title":"ES6 (EcmaScript 2015)","text":"<p>Amb la sintaxi ES6, es poden exportar i importar funcions i dades utilitzant les paraules clau <code>export</code> i <code>import</code>. Aqu\u00ed tens un exemple:</p> <pre><code>// Exemple de m\u00f2dul que exporta funcions amb ES6\nexport function celsiusToFahrenheit(celsius) {\n  return celsius * (9 / 5) + 32;\n}\n\nexport function fahrenheitToCelsius(fahrenheit) {\n  return (fahrenheit - 32) * (5 / 9);\n}\n</code></pre> <pre><code>// Exemple d'\u00fas d'importaci\u00f3 amb ES6\nimport { celsiusToFahrenheit } from './converters.js';\n\nconst celsiusInput = process.argv[2];\nconst fahrenheitValue = celsiusToFahrenheit(celsiusInput);\n\nconsole.log(\n  `${celsiusInput} graus Celsius = ${fahrenheitValue} graus Fahrenheit`\n);\n</code></pre> <p>Amb aquest enfocament, les funcions es poden exportar directament amb l'\u00fas de <code>export</code> i importar amb l'\u00fas de <code>import</code>.</p> <p>Aquest \u00e9s el m\u00e8tode preferit per a la gesti\u00f3 de m\u00f2duls en aplicacions web modernes i \u00e9s compatible amb molts entorns de desenvolupament i eines de construcci\u00f3 de paquets com Webpack, Parcel, Babel...</p>"},{"location":"UF2/UF2.1/UF2.1.3_Moduls/#referencies","title":"Refer\u00e8ncies","text":"<p>CommonJS vs ES Modules</p>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/","title":"Arrays a JavaScript","text":"<p>A mesura que treballem en el nostre codi, sovint necessitem agrupar valors en una mateixa variable per representar conjunts de dades relacionades. Per fer-ho, podem utilitzar objectes o variables m\u00e9s senzilles anomenades arrays.</p>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#que-es-un-array","title":"Qu\u00e8 \u00e9s un array?","text":"<p>Un array \u00e9s una col\u00b7lecci\u00f3 o agrupaci\u00f3 d'elements en una \u00fanica variable, cada un d'ells ubicat per la posici\u00f3 que ocupa a l'array. En algunes ocasions tamb\u00e9 ho trobareu referit en castella com \"arreglos\" o \"vectors\". A JavaScript, es poden definir de diverses formes:</p>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#constructor","title":"Constructor","text":"<p>Descripci\u00f3</p> <ul> <li><code>new Array(size)</code>: Crea un array buit de mida <code>size</code>. Els seus valors no estan definits, per\u00f2 estan disponibles.</li> <li><code>new Array(e1, e2...)</code>: Crea un array amb els elements indicats.</li> <li><code>[e1, e2...]</code>: Simplement, els elements dins de claud\u00e0tors. Aquesta \u00e9s la notaci\u00f3 preferida.</li> </ul> <p>Per exemple, podr\u00edem tenir un array on la primera posici\u00f3 contingui 'a', la segona 'b' i la tercera 'c'. Aix\u00f2 es crearia de la seg\u00fcent manera:</p> <pre><code>// Forma tradicional (no sovint utilitzada en JavaScript)\nconst lletres = new Array('a', 'b', 'c'); // Array amb 3 elements\nconst lletres = new Array(3); // Array buit de mida 3\n\n// Mitjan\u00e7ant literals (notaci\u00f3 preferida)\nconst lletres = ['a', 'b', 'c']; // Array amb 3 elements\nconst lletres = []; // Array buit (0 elements)\nconst lletres = ['a', 5, true]; // Array mixt (String, Number, Boolean)\n</code></pre> <p>A difer\u00e8ncia de molts altres llenguatges de programaci\u00f3, JavaScript permet que els arrays siguin de tipus mixt, no \u00e9s obligatori que tots els elements siguin del mateix tipus de dades.</p> <p>Atenci\u00f3!</p> <p>En crear un array amb <code>new Array(size)</code>: si nom\u00e9s s'indica un par\u00e0metre num\u00e8ric <code>size</code>, JavaScript crear\u00e0 un array buit amb <code>size</code> elements. No \u00e9s el mateix que <code>const a = [3]</code>, on creem un array amb un sol element, 3, que <code>new Array(size)</code> on es crea un array buit que encara no ha estat omplert amb res.</p>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#acces-als-elements-de-larray","title":"Acc\u00e9s als elements de l'array","text":"<p>Per saber quantitat d'elements que t\u00e9 un array \u00e9s molt senzill. Nom\u00e9s cal accedir a la propietat <code>length</code>, que ens retornar\u00e0 el nombre d'elements que hi ha a l'array:</p> <ul> <li><code>.length</code>: Propietat que retorna el nombre d'elements de l'array.</li> </ul> <p>Tamb\u00e9 podem accedir o modificar un element espec\u00edfic de l'array utilitzant l'operador <code>[]</code>, de la mateixa manera que far\u00edem amb strings per accedir a un car\u00e0cter concret:</p> <pre><code>const lletres = ['a', 'b', 'c'];\n\nlletres.length; // 3\nlletres[0]; // 'a'\nlletres[2]; // 'c'\nlletres[5]; // undefined\n</code></pre> <p>Recorda que les posicions comencen a comptar des de 0 i que si intentem accedir a una posici\u00f3 que no existeix (m\u00e9s gran que la mida de l'array), ens tornar\u00e0 <code>undefined</code>.</p> <p>L'operador <code>[]</code> no nom\u00e9s ens permet obtenir o accedir a un element de l'array, sin\u00f3 que tamb\u00e9 ens permet modificar un element espec\u00edfic de l'array si fem una assignaci\u00f3:</p> <pre><code>const lletres = ['a', 'b', 'c'];\n\nlletres[1] = 'Z'; // Retorna \"Z\" i modifica lletres a [\"a\", \"Z\", \"c\"]\nlletres[3] = 'D'; // Retorna \"D\" i modifica lletres a [\"a\", \"Z\", \"c\", \"D\"]\nlletres[5] = 'A'; // Retorna \"A\" i modifica lletres a [\"a\", \"Z\", \"c\", \"D\", undefined, \"A\"]\n</code></pre> <p>Amb el nou m\u00e8tode <code>.with()</code>, aix\u00f2 es pot fer d'una manera m\u00e9s c\u00f2moda i sense modificar l'array original. Permet concatenar m\u00faltiples operacions, per\u00f2 recorda que nom\u00e9s modifica, no es poden afegir elements que no existeixin pr\u00e8viament a l'array:</p> <pre><code>const lletres = ['a', 'b', 'c'];\n\nlletres.with(1, 'Z'); // Retorna \"Z\" i modifica lletres a [\"a\", \"Z\", \"c\"]\nlletres.with(1, 'Z').with(3, 'D'); // No es pot fer perqu\u00e8 la posici\u00f3 3 no existeix\nlletres.with(5, 'A'); // No es pot fer perqu\u00e8 la posici\u00f3 5 no existeix\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#el-metode-at","title":"El m\u00e8tode <code>.at()</code>","text":"<p>A m\u00e9s de l'operador <code>[]</code>, tamb\u00e9 podem utilitzar el</p> <p>m\u00e8tode <code>.at()</code>, afegit a JavaScript. Amb aquest m\u00e8tode, podem fer exactament el mateix que amb <code>[pos]</code>, per\u00f2 a m\u00e9s permet valors negatius, mitjan\u00e7ant els quals es poden obtenir elements en ordre invers, comen\u00e7ant des de l'\u00faltim element:</p> <pre><code>const lletres = ['a', 'b', 'c'];\n\nlletres.at(0); // \"a\"\nlletres.at(1); // \"b\"\nlletres.at(3); // undefined\nlletres.at(-1); // \"c\"\nlletres.at(-2); // \"b\"\n</code></pre> <p>Aquesta caracter\u00edstica fa que sigui bastant pr\u00e0ctic accedir a l'\u00faltim element (o prop de l'\u00faltim), ja que fer la mateixa operaci\u00f3 amb l'operador <code>[]</code> era una mica menys directe i en alguns casos podia ser conf\u00fas o poc intu\u00eftiu:</p> <pre><code>const lletres = ['a', 'b', 'c'];\nconst darrerElement = lletres.length - 1;\n\nlletres[darrerElement]; // \"c\"\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#afegir-o-eliminar-elements","title":"Afegir o eliminar elements","text":"<p>Hi ha diverses maneres d'afegir elements a un array ja existent. Tingues en compte que en tots aquests casos estem modificant (variant) l'array original. Veurem els m\u00e8todes que podem utilitzar per fer-ho:</p>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#metode","title":"M\u00e8tode","text":"<ul> <li><code>.push(e1, e2, e3...)</code>: Afegeix un o diversos elements al final de l'array. Retorna la grand\u00e0ria de l'array.</li> <li><code>.pop()</code>: Elimina l'\u00faltim element de l'array. Retorna l'element eliminat.</li> <li><code>.unshift(e1, e2, e3...)</code>: Afegeix un o diversos elements a l'inici de l'array. Retorna la grand\u00e0ria de l'array.</li> <li><code>.shift()</code>: Elimina el primer element de l'array. Retorna l'element eliminat.</li> </ul> <p>Tingues en compte que aquests m\u00e8todes serveixen per modificar (mutar) l'array original!!!</p> <p>Els arrays de JavaScript proporcionen m\u00e8todes tant per inserir com per eliminar elements al final de l'array i tamb\u00e9 a l'inici:</p> <ul> <li>Els m\u00e8todes <code>.push()</code> i <code>.pop()</code> intervenen al final de l'array.</li> <li>Els m\u00e8todes <code>.unshift()</code> i <code>.shift()</code> intervenen a l'inici de l'array.</li> </ul> <p>Vegem com funcionen:</p> <pre><code>const elements = [1, 2, 3]; // Array inicial\n\nelements.push(4, 5, 6); // Retorna 6. Ara elements = [1, 2, 3, 4, 5, 6]\nelements.push([7, 8, 9]); // Retorna 7. Ara elements = [1, 2, 3, 4, 5, 6, [7, 8, 9]]\n</code></pre> <p>El mateix exemple realitzat amb el m\u00e8tode <code>.concat()</code>:</p> <pre><code>const primeraPart = [1, 2, 3];\nconst segonaPart = [4, 5, 6];\n\nprimeraPart.concat(primeraPart); // Retorna [1, 2, 3, 1, 2, 3]\nprimeraPart.concat(segonaPart); // Retorna [1, 2, 3, 4, 5, 6]\n\n// Es poden passar elements individuals\nprimeraPart.concat(4, 5, 6); // Retorna [1, 2, 3, 4, 5, 6]\n\n// Es poden concatenar m\u00faltiples arrays i fins i tot barrejar-los amb elements individuals\nprimeraPart.concat(primeraPart, segonaPart, 7); // Retorna [1, 2, 3, 1, 2, 3, 4, 5, 6, 7]\n</code></pre> <p>Observa una detall molt important: El m\u00e8tode <code>.concat()</code>, a difer\u00e8ncia de <code>.push()</code>, no modifica l'array sobre el qual estem treballant i al qual li afegim els elements, sin\u00f3 que simplement el retorna. A part d'aix\u00f2, en el cas de passar un array com a par\u00e0metre, <code>.push()</code> l'insereix com un array, mentre que <code>.concat()</code> insereix cadascun dels seus elements.</p>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#separar-i-unir-strings","title":"Separar i unir strings","text":"<p>Tamb\u00e9 tenim un altre m\u00e8tode amb el qual \u00e9s possible crear un array a partir d'un string. Es tracta del m\u00e8tode <code>.split()</code>. En aquest cas, el m\u00e8tode <code>.join()</code> n'\u00e9s la contrapartida. Amb <code>.join()</code> podem crear un string amb tots els elements de l'array, separant-los amb el text que li passem com a par\u00e0metre:</p> <pre><code>const lletres = ['a', 'b', 'c'];\n\n// Uneix elements de l'array amb el separador indicat\nlletres.join('-&gt;'); // Retorna 'a-&gt;b-&gt;c'\nlletres.join('.'); // Retorna 'a.b.c'\n\n// Separa elements del string amb el separador indicat\n'a.b.c'.split('.'); // Retorna ['a', 'b', 'c']\n'5-4-3-2-1'.split('-'); // Retorna ['5', '4', '3', '2', '1']\n</code></pre> <p>Com es pot veure en els exemples, <code>.join()</code> sempre retorna els elements com un string, mentre que <code>.split()</code> retorna un array.</p> <p>Observa un cas especial, en el qual passem una cadena de text buida a <code>.split()</code>:</p> <pre><code>'Hola a tots'.split(''); // Retorna ['H', 'o', 'l', 'a', ' ', 'a', ' ', 't', 'o', 'd', 'o', 's']\n</code></pre> <p>En aquest cas, hem demanat dividir el string sense indicar cap separador, per la qual cosa JavaScript pren la unitat m\u00ednima com a separador i ens retorna un array amb cada car\u00e0cter del string original. Tingues en compte que els espais en blanc tamb\u00e9 compten com a car\u00e0cter.</p>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#cerca-delements-en-un-array","title":"CERCA d'Elements en un Array","text":"<p>En moltes ocasions, ens interessa cercar elements en un array per b\u00e9 trobar-lo i treballar-hi, o per saber la seva posici\u00f3 en l'array. Per a aix\u00f2, existeixen una s\u00e8rie de m\u00e8todes que ens permeten dur a terme aquestes accions. A continuaci\u00f3, es mostren els seg\u00fcents m\u00e8todes:</p>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#includeselement","title":"<code>.includes(element)</code>","text":"<p>Aquest m\u00e8tode comprova si l'element est\u00e0 incl\u00f2s a l'array.</p> <p>Exemple d'\u00fas:</p> <pre><code>const array = [1, 2, 3, 4, 5];\nconst element = 3;\n\nif (array.includes(element)) {\n  console.log(`L'element ${element} est\u00e0 a l'array.`);\n} else {\n  console.log(`L'element ${element} no est\u00e0 a l'array.`);\n}\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#includeselement-from","title":"<code>.includes(element, from)</code>","text":"<p>Aquest m\u00e8tode fa la mateixa comprovaci\u00f3, per\u00f2 comen\u00e7a des de la posici\u00f3 <code>from</code> de l'array.</p> <p>Exemple d'\u00fas:</p> <pre><code>const array = [1, 2, 3, 4, 5];\nconst element = 3;\nconst from = 2;\n\nif (array.includes(element, from)) {\n  console.log(\n    `L'element ${element} est\u00e0 a l'array a partir de la posici\u00f3 ${from}.`\n  );\n} else {\n  console.log(\n    `L'element ${element} no est\u00e0 a l'array a partir de la posici\u00f3 ${from}.`\n  );\n}\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#indexofelement","title":"<code>.indexOf(element)</code>","text":"<p>Aquest m\u00e8tode retorna la posici\u00f3 de la primera aparici\u00f3 de l'element a l'array. Si no existeix, retorna -1.</p> <p>Exemple d'\u00fas:</p> <pre><code>const array = [1, 2, 3, 4, 5];\nconst element = 3;\nconst index = array.indexOf(element);\n\nif (index !== -1) {\n  console.log(`L'element ${element} est\u00e0 a la posici\u00f3 ${index} de l'array.`);\n} else {\n  console.log(`L'element ${element} no est\u00e0 a l'array.`);\n}\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#indexofelement-from","title":"<code>.indexOf(element, from)</code>","text":"<p>Aquest m\u00e8tode fa la mateixa tasca, per\u00f2 comen\u00e7a a buscar des de la posici\u00f3 <code>from</code> de l'array.</p> <p>Exemple d'\u00fas:</p> <pre><code>const array = [1, 2, 3, 4, 3, 5];\nconst element = 3;\nconst from = 2;\nconst index = array.indexOf(element, from);\n\nif (index !== -1) {\n  console.log(\n    `L'element ${element} est\u00e0 a la posici\u00f3 ${index} de l'array a partir de la posici\u00f3 ${from}.`\n  );\n} else {\n  console.log(\n    `L'element ${element} no est\u00e0 a l'array a partir de la posici\u00f3 ${from}.`\n  );\n}\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#lastindexofelement","title":"<code>.lastIndexOf(element)</code>","text":"<p>Aquest m\u00e8tode retorna la posici\u00f3 de la \u00faltima aparici\u00f3 de l'element a l'array. Si no existeix, retorna -1.</p> <p>Exemple d'\u00fas:</p> <pre><code>const array = [1, 2, 3, 4, 3, 5];\nconst element = 3;\nconst lastIndex = array.lastIndexOf(element);\n\nif (lastIndex !== -1) {\n  console.log(\n    `L'\u00faltima aparici\u00f3 de l'element ${element} est\u00e0 a la posici\u00f3 ${lastIndex} de l'array.`\n  );\n} else {\n  console.log(`L'element ${element} no est\u00e0 a l'array.`);\n}\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#lastindexofelement-from","title":"<code>.lastIndexOf(element, from)</code>","text":"<p>Aquest m\u00e8tode fa la mateixa comprovaci\u00f3, per\u00f2 comen\u00e7a a buscar des de la posici\u00f3 <code>from</code> de l'array.</p> <p>Exemple d'\u00fas:</p> <pre><code>const array = [1, 2, 3, 4, 3, 5];\nconst element = 3;\nconst from = 2;\nconst lastIndex = array.lastIndexOf(element, from);\n\nif (lastIndex !== -1) {\n  console.log(\n    `L'\u00faltima aparici\u00f3 de l'element ${element} est\u00e0 a la posici\u00f3 ${lastIndex} de l'array a partir de la posici\u00f3 ${from}.`\n  );\n} else {\n  console.log(\n    `L'element ${element} no est\u00e0 a l'array a partir de la posici\u00f3 ${from}.`\n  );\n}\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#creacio-i-modificacio-de-subarrays","title":"CREACI\u00d3 I MODIFICACI\u00d3 de Subarrays","text":"<p>En algunes situacions, \u00e9s necessari crear nous subarrays a partir d'un array original o realitzar modificacions a l'array original d'una manera m\u00e9s general, en lloc de fer-ho element per element. Per a aquestes tasques, hi ha diversos m\u00e8todes relacionats. A continuaci\u00f3, es descriuen aquests m\u00e8todes:</p> <p>A partir dara, els m\u00e8todes que es descriuen a continuaci\u00f3 poden o no modificar l'array original.</p> <p>\u2705 L'array original roman sense canvis. \u26a0\ufe0f L'array original es modifica.</p>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#slicestart-end","title":"<code>.slice(start, end)</code> \u2705","text":"<p>Aquest m\u00e8tode retorna els elements des de la posici\u00f3 <code>start</code> fins a <code>end</code> (excloent <code>end</code>). L'array original no es modifica.</p> <p>Exemple d'\u00fas:</p> <pre><code>const arrayOriginal = [1, 2, 3, 4, 5];\nconst subarray = arrayOriginal.slice(1, 4); // Retorna [2, 3, 4]\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#splicestart-size","title":"<code>.splice(start, size)</code> \u26a0\ufe0f","text":"<p>Aquest m\u00e8tode retorna els propers <code>size</code> elements des de la posici\u00f3 <code>start</code>. Tamb\u00e9 modifica l'array original.</p> <p>Exemple d'\u00fas:</p> <pre><code>const arrayOriginal = [1, 2, 3, 4, 5];\nconst subarray = arrayOriginal.splice(1, 3); // Retorna [2, 3, 4] i modifica arrayOriginal a [1, 5]\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#splicestart-size-e1-e2","title":"<code>.splice(start, size, e1, e2...)</code> \u26a0\ufe0f","text":"<p>Aquest m\u00e8tode retorna els propers <code>size</code> elements des de la posici\u00f3 <code>start</code>. A m\u00e9s, insereix els elements <code>e1</code>, <code>e2</code>, etc., a la posici\u00f3 <code>start</code>. Tamb\u00e9 modifica l'array original.</p> <p>Exemple d'\u00fas:</p> <pre><code>const arrayOriginal = [1, 2, 3, 4, 5];\nconst subarray = arrayOriginal.splice(1, 3, 6, 7); // Retorna [2, 3, 4] i modifica arrayOriginal a [1, 6, 7, 5]\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#tosplicedstart-size","title":"<code>.toSpliced(start, size)</code> \u2705","text":"<p>Aquest m\u00e8tode \u00e9s similar a <code>splice(start, size)</code>, per\u00f2 no modifica l'array original i retorna una c\u00f2pia dels elements seleccionats.</p> <p>Exemple d'\u00fas:</p> <pre><code>const arrayOriginal = [1, 2, 3, 4, 5];\nconst subarray = arrayOriginal.toSpliced(1, 3); // Retorna [2, 3, 4] sense modificar arrayOriginal\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#tosplicedstart-size-e1-e2","title":"<code>.toSpliced(start, size, e1, e2...)</code> \u2705","text":"<p>Aquest m\u00e8tode \u00e9s similar a <code>splice(start, size, e1, e2...)</code>, per\u00f2 no modifica l'array original i retorna una c\u00f2pia dels elements seleccionats.</p> <p>Exemple d'\u00fas:</p> <pre><code>const arrayOriginal = [1, 2, 3, 4, 5];\nconst subarray = arrayOriginal.toSpliced(1, 3, 6, 7); // Retorna [2, 3, 4] sense modificar arrayOriginal\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#copywithinpos-start-end","title":"<code>.copyWithin(pos, start, end)</code> \u26a0\ufe0f","text":"<p>Aquest m\u00e8tode muta l'array, canviant els elements a la posici\u00f3 <code>pos</code> i copiant des de <code>start</code> fins a <code>end</code>.</p> <p>Exemple d'\u00fas:</p> <pre><code>const arrayOriginal = [1, 2, 3, 4, 5];\narrayOriginal.copyWithin(0, 2, 4); // Modifica arrayOriginal a [3, 4, 3, 4, 5]\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#fillelement-start-end","title":"<code>.fill(element, start, end)</code> \u26a0\ufe0f","text":"<p>Aquest m\u00e8tode canvia els elements de l'array per l'element <code>element</code> des de la posici\u00f3 <code>start</code> fins a <code>end</code>.</p> <p>Exemple d'\u00fas:</p> <pre><code>const arrayOriginal = [1, 2, 3, 4, 5];\narrayOriginal.fill(0, 1, 4); // Modifica arrayOriginal a [1, 0, 0, 0, 5]\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#withindex-item","title":"<code>.with(index, item)</code> \u2705","text":"<p>Aquest m\u00e8tode retorna una c\u00f2pia de l'array original amb l'element a la posici\u00f3 <code>index</code> modificat. L'array original roman sense canvis.</p> <p>Exemple d'\u00fas:</p> <pre><code>const arrayOriginal = [1, 2, 3, 4, 5];\nconst nouArray = arrayOriginal.with(2, 6); // Retorna [1, 2, 6, 4, 5] sense modificar arrayOriginal\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#ordenacio-darrays","title":"ORDENACI\u00d3 d'Arrays","text":"<p>En JavaScript, \u00e9s freq\u00fcent tenir una estructura de dades com un array i voler ordenar-ne el contingut segons un criteri espec\u00edfic. En aquesta secci\u00f3, veurem alguns m\u00e8todes i formes per ordenar un array o realitzar modificacions per canviar-ne l'ordre:</p>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#reverse","title":"<code>.reverse()</code> \u26a0\ufe0f","text":"<p>Aquest m\u00e8tode inverteix l'ordre dels elements de l'array. Modifica l'array original.</p> <p>Exemple d'\u00fas:</p> <pre><code>const elements = ['A', 'B', 'C', 'D', 'E', 'F'];\nelements.reverse(); // Modifica elements a [\"F\", \"E\", \"D\", \"C\", \"B\", \"A\"]\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#toreversed","title":"<code>.toReversed()</code> \u2705","text":"<p>Aquest m\u00e8tode retorna una c\u00f2pia de l'array amb l'ordre dels elements invertit. L'array original roman sense canvis.</p> <p>Exemple d'\u00fas:</p> <pre><code>const elements = ['A', 'B', 'C', 'D', 'E', 'F'];\nconst reversedArray = elements.toReversed(); // Retorna [\"F\", \"E\", \"D\", \"C\", \"B\", \"A\"], sense modificar elements\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#sort","title":"<code>.sort()</code> \u26a0\ufe0f","text":"<p>Aquest m\u00e8tode ordena els elements de l'array segons un criteri de classificaci\u00f3 alfab\u00e8tica. Modifica l'array original.</p> <p>Exemple d'\u00fas:</p> <pre><code>const elements = ['F', 'B', 'D', 'E', 'A', 'C'];\nelements.sort(); // Modifica elements a [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#sortcriteri","title":"<code>.sort(criteri)</code> \u26a0\ufe0f","text":"<p>Aquest m\u00e8tode ordena els elements de l'array segons un criteri de classificaci\u00f3 indicat pel par\u00e0metre <code>criteri</code>. Modifica l'array original.</p> <p>Exemple d'\u00fas amb criteri personalitzat (orden inversa):</p> <pre><code>const elements = [5, 3, 1, 4, 2];\nelements.sort((a, b) =&gt; b - a); // Modifica elements a [5, 4, 3, 2, 1]\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#tosorted","title":"<code>.toSorted()</code> \u2705","text":"<p>Aquest m\u00e8tode retorna una c\u00f2pia de l'array amb els elements ordenats. L'array original roman sense canvis.</p> <p>Exemple d'\u00fas:</p> <pre><code>const elements = ['F', 'B', 'D', 'E', 'A', 'C'];\nconst sortedArray = elements.toSorted(); // Retorna [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"], sense modificar elements\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#tosortedcriteri","title":"<code>.toSorted(criteri)</code> \u2705","text":"<p>Aquest m\u00e8tode retorna una c\u00f2pia de l'array amb els elements ordenats segons un criteri de classificaci\u00f3 indicat pel par\u00e0metre <code>criteri</code>. L'array original roman sense canvis.</p> <p>Exemple d'\u00fas amb criteri personalitzat (orden inversa):</p> <pre><code>const elements = [5, 3, 1, 4, 2];\nconst sortedArray = elements.toSorted((a, b) =&gt; b - a); // Retorna [5, 4, 3, 2, 1], sense modificar elements\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#funcions-darray-array-functions","title":"FUNCIONS d'Array (Array functions)","text":""},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#que-son-les-funcions-darray","title":"Qu\u00e8 s\u00f3n les funcions d'array?","text":"<p>B\u00e0sicament, s\u00f3n m\u00e8todes que t\u00e9 qualsevol variable que sigui de tipus Array, i que permeten realitzar una operaci\u00f3 amb tots els elements d'aquest array (o una part d'ells) per aconseguir un objectiu concret, depenent del m\u00e8tode. En general, a aquests m\u00e8todes se'ls passa per par\u00e0metre una funci\u00f3 de retorn i uns par\u00e0metres opcionals.</p> <p>Aquestes s\u00f3n les funcions d'array que podem trobar a JavaScript:</p>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#foreach","title":"forEach(\u0192)","text":"<p>Executa la funci\u00f3 definida a \u0192 per a cada un dels elements de l'array.</p> <p>Exemple d'\u00fas en JavaScript:</p> <pre><code>const array = [1, 2, 3, 4];\n\narray.forEach((element) =&gt; {\n  console.log(element);\n});\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#every","title":"every(\u0192)","text":"<p>Comprova si tots els elements de l'array compleixen la condici\u00f3 de \u0192.</p> <p>Exemple d'\u00fas en JavaScript:</p> <pre><code>const array = [1, 2, 3, 4];\n\nconst result = array.every((element) =&gt; {\n  return element &gt; 0;\n});\n\nconsole.log(result); // Resultat: true\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#some","title":"some(\u0192)","text":"<p>Comprova si almenys un element de l'array compleix la condici\u00f3 de \u0192.</p> <p>Exemple d'\u00fas en JavaScript:</p> <pre><code>const array = [1, 2, 3, 4];\n\nconst result = array.some((element) =&gt; {\n  return element % 2 === 0;\n});\n\nconsole.log(result); // Resultat: true\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#map","title":"map(\u0192)","text":"<p>Construeix un array amb el que retorna \u0192 per a cada element de l'array.</p> <p>Exemple d'\u00fas en JavaScript:</p> <pre><code>const array = [1, 2, 3, 4];\n\nconst mappedArray = array.map((element) =&gt; {\n  return element * 2;\n});\n\nconsole.log(mappedArray); // Resultat: [2, 4, 6, 8]\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#filter","title":"filter(\u0192)","text":"<p>Filtra un array i es queda nom\u00e9s amb els elements que compleixen la condici\u00f3 de \u0192.</p> <p>Exemple d'\u00fas en JavaScript:</p> <pre><code>const array = [1, 2, 3, 4];\n\nconst filteredArray = array.filter((element) =&gt; {\n  return element % 2 === 0;\n});\n\nconsole.log(filteredArray); // Resultat: [2, 4]\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#flatlevel","title":"flat(level)","text":"<p>Aplana l'array al nivell level indicat.</p> <p>Exemple d'\u00fas en JavaScript:</p> <pre><code>const array = [1, [2, 3], [4, [5, 6]]];\n\nconst flattenedArray = array.flat(2);\n\nconsole.log(flattenedArray); // Resultat: [1, 2, 3, 4, 5, 6]\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#flatmap","title":"flatMap(\u0192)","text":"<p>Aplana cada element de l'array, transformant-lo segons \u0192. \u00c9s equivalent a .map().flat(1).</p> <p>Exemple d'\u00fas en JavaScript:</p> <pre><code>const array = [1, 2, 3];\n\nconst flatMappedArray = array.flatMap((element) =&gt; {\n  return [element, element * 2];\n});\n\nconsole.log(flatMappedArray); // Resultat: [1, 2, 2, 4, 3, 6]\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#findindex","title":"findIndex(\u0192)","text":"<p>Retorna la posici\u00f3 de l'element que compleix la condici\u00f3 de \u0192.</p> <p>Exemple d'\u00fas en JavaScript:</p> <pre><code>const array = [1, 2, 3, 4];\n\nconst index = array.findIndex((element) =&gt; {\n  return element === 3;\n});\n\nconsole.log(index); // Resultat: 2\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#find","title":"find(\u0192)","text":"<p>Retorna l'element que compleix la condici\u00f3 de \u0192.</p> <p>Exemple d'\u00fas en JavaScript:</p> <pre><code>const array = [1, 2, 3, 4];\n\nconst element = array.find((element) =&gt; {\n  return element % 2 === 0;\n});\n\nconsole.log(element); // Resultat: 2\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#findlastindex","title":"findLastIndex(\u0192)","text":"<p>Igual que findIndex(), per\u00f2 comen\u00e7a a buscar des de l'\u00faltim element al primer.</p>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#findlast","title":"findLast(\u0192)","text":"<p>Igual que find(), per\u00f2 comen\u00e7a a buscar des de l'\u00faltim element al primer.</p>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#reduce-initial","title":"reduce(\u0192, initial)","text":"<p>Executa \u0192 amb cada element (d'esquerra a dreta), acumulant el resultat.</p> <p>Exemple d'\u00fas en JavaScript:</p> <pre><code>const array = [1, 2, 3, 4];\n\nconst result = array.reduce((accumulator, element) =&gt; {\n  return accumulator + element;\n}, 0);\n\nconsole.log(result); // Resultat: 10\n</code></pre>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#reduceright-initial","title":"reduceRight(\u0192, initial)","text":"<p>Igual que l'anterior, per\u00f2 en ordre de dreta a esquerra.</p>"},{"location":"UF2/UF2.1/UF2.1.4_Arrays/#referencies","title":"Refer\u00e8ncies","text":"<ul> <li>MDN - JavaScript Array</li> <li>W3Schools - JavaScript Array</li> <li>LenguajeJS.com - Qu\u00e9 es un Array?</li> </ul>"}]}